import { getVBankWorkspacePath } from './utils/cucumber';
/**
 * Cross-origin configuration or a boolean indicating if CORS should be active
 */
export interface CorsSettings {
    /**
     * Headers for which CORS is enabled.
     *
     * Default: *null*
     */
    headers: string[];
    /**
     * Methods for which CORS is enabled.
     *
     * Default: *null*
     */
    methods: string[];
}
/**
 * List of backends to be provided.
 */
export interface Backends {
    /**
     * Name of the backend. It's the name we'll use to target the host when
     * requesting a response from the service.
     *
     * Default: *back(+i)*
     */
    name: string;
    /**
     * Backend's real url to be proxied when *record mode* is active so that
     * client-server interactions through services can be virtualized.
     *
     * Default: *null*
     */
    realUrl?: string;
    /**
     * Protocol to be used.
     *
     * Default: *http|https*
     */
    protocol: 'http' | 'https';
    /**
     * Port number to be exposed.
     *
     * Default: *5000(+i)*
     */
    port: string;
    /**
     * Expression or list of expressions where vBank will be able to find the session locator
     * in case of parallel test execution.
     *
     * Default: *headers.x-vbank-session*
     */
    sessionLocator: string | string[];
    /**
     * Expression or list of expressions indicating the place where vBank should
     * inject the session in the responses.
     *
     * Default: *''*
     */
    sessionInjector: string | string[];
    /**
     * Cross-origin configuration or a boolean indicating if CORS should be active.
     *
     * Default: *null*
     */
    cors: CorsSettings | boolean;
}
/**
 * vBank's Main Configuration Settings
 *
 * -----------------------
 */
export interface VBankConfig {
    /**
     * The path where vBank stubs are located.
     *
     * Default: *vbank*
     */
    workspace: string;
    /**
    * String in regexp syntax indicating the domains vBank will be listening to.
    * By default, it's 'localhost' or the value assigned to the *adminUrl* property.
    *
    * Default: *localhost*
    */
    vbankHost?: string;
    /**
     * Port number vBank is listening to by default
     *
     * Default: *8080*
     */
    vbankPort?: string;
    /**
     * List of backends to be provided.
     *
     * Default: *null*
     */
    backends?: Backends[];
    /**
    * When truthy, vBank is configured to work in recording mode.
    *
    * This means that http(s) requests to services are virtualized, so next time the
    * tests are executed vBank can provide with recorded responses, making the testing
    * environment much more stable since there're no more dependence on the services' environment(s).
    *
    * Default: *false*
    */
    recording: boolean;
    /**
     * When truthy, vBank is configured to execute several sessions in parallel,
     * contributing to minimize tests' execution times.
     *
     * Default: *false*
     */
    parallel: boolean;
    /**
     * When the [Launcher service](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/e2e-js-framework/browse/packages/wdio-vbank-service/README.md)
     * is not being used to start vBank server and the host url is different to 'http://localhost:8080'.
     *
     * Default: *http://localhost:8080*
     */
    adminUrl?: string;
    /**
     * File where vBank logs are stored.
     *
     * Default: *results/vbank.log*
     */
    logFile?: string;
    /**
     * When truthy, verbose mode is active at the time of displaying logs.
     *
     * Default: *false*
     */
    verbose: boolean;
    /**
     * VBank additional arguments
     *
     * Default: *[]*
     */
    args: string[];
    /**
     * @hidden
     */
    customScenarioPathBuilder: typeof getVBankWorkspacePath;
}
/** @internal */
export declare class VBankLauncher {
    private vbank;
    private config;
    constructor(pluginConfig: {
        vbank?: VBankConfig;
    }, _capabilities: any, browserConfig: {
        vbank?: VBankConfig;
    });
    onPrepare(): Promise<void>;
    onComplete(): Promise<void>;
    _getBackends(backendsConfig: any): any;
    _getArgs(args: any, vbankPort: any): any;
    _getLogFile(logFile: any): any;
    _getWorkspace(workspace: any): any;
}
//# sourceMappingURL=launcher.d.ts.map