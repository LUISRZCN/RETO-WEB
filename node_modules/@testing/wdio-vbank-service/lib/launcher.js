"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.VBankLauncher = void 0;
/**
 * Acis provides us by default with the possibility of using **vBank's virtualized services**
 * just by adding the vBank configuration block to the global settings passed to the
 * *configBuild* helper function from
 * **[@testing/wdio-config](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/e2e-js-framework/browse/packages/wdio-config/README.md)**
 *
 * For more info about what vBank can do for you, the detailed
 * [documentation is available](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/vbank-cloud/browse).
 *
 * -----------------------
 *
 * @module WdioVbankService
 */
var mkdirp_1 = require("mkdirp");
var fs_1 = require("fs");
var backends_1 = require("./utils/backends");
var ensurePathExists = function (folderPath) {
    if (!fs_1.existsSync(folderPath)) {
        mkdirp_1.sync(folderPath);
    }
};
var VBankProcess = require("@testing/vbank-js-launcher");
/** @internal */
var VBankLauncher = /** @class */ (function () {
    function VBankLauncher(pluginConfig, _capabilities, browserConfig) {
        var vbank = (pluginConfig && pluginConfig.vbank) || (browserConfig && browserConfig.vbank);
        if (!vbank || vbank.adminUrl) {
            return;
        }
        var args = vbank.args, vbankPort = vbank.vbankPort, logFile = vbank.logFile, workspace = vbank.workspace, backends = vbank.backends;
        this.config = __assign(__assign({}, vbank), { args: this._getArgs(args, vbankPort), logFile: this._getLogFile(logFile), workspace: this._getWorkspace(workspace), backends: this._getBackends(backends) });
        ensurePathExists(this.config.workspace);
        this.vbank = vbank && new VBankProcess();
    }
    VBankLauncher.prototype.onPrepare = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.vbank) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.vbank.start(this.config)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    VBankLauncher.prototype.onComplete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.vbank) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.vbank.stop()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    VBankLauncher.prototype._getBackends = function (backendsConfig) {
        return backendsConfig.map(function (backend, i) {
            return __assign(__assign({}, backend), { cors: backends_1.backends.checkCors(backend.cors), sessionLocator: backends_1.backends.checkSessionLocator(backend.sessionLocator), name: backends_1.backends.checkName(backend.name, i), port: backends_1.backends.checkPort(backend, i), protocol: backends_1.backends.checkProtocol() });
        });
    };
    VBankLauncher.prototype._getArgs = function (args, vbankPort) {
        var portArgs = !!vbankPort && ['-p', vbankPort];
        if (portArgs) {
            return !!args && Array.isArray(args) ? args.concat(portArgs) : portArgs;
        }
        return args;
    };
    VBankLauncher.prototype._getLogFile = function (logFile) {
        return logFile || 'results/vbank.log';
    };
    VBankLauncher.prototype._getWorkspace = function (workspace) {
        return workspace || 'vbank';
    };
    return VBankLauncher;
}());
exports.VBankLauncher = VBankLauncher;
//# sourceMappingURL=launcher.js.map