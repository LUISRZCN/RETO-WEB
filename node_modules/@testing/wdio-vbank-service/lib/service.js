"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.VBankService = void 0;
var logger_1 = require("@wdio/logger");
var request = require("request");
var cucumber_1 = require("./utils/cucumber");
var browser_1 = require("./utils/browser");
var datamanager_1 = require("./utils/datamanager");
var log = logger_1["default"]('@testing/vbank-service');
var SESSION_HEADER = 'x-vbank-session';
/** @internal */
var VBankService = /** @class */ (function () {
    function VBankService(pluginConfig, _capabilities, browserConfig) {
        var vbank = (pluginConfig && pluginConfig.vbank) || (browserConfig && browserConfig.vbank);
        this.config = vbank;
        this.isServiceEnabled = !!vbank;
        if (this.isServiceEnabled) {
            var vBankPort = vbank.vbankPort || 8080;
            this.getVBankWorkspacePath = this.config.customScenarioPathBuilder || cucumber_1.getVBankWorkspacePath;
            this.isRecoding = !!this.config.recording;
            this.isParallelizationEnabled = !!this.config.parallel;
            this.vbankAdminUri = vbank.adminUrl || "http://localhost:" + vBankPort;
            this.vbankHost = vbank.vbankHost || new URL(this.vbankAdminUri).hostname;
        }
    }
    /**
     * Cucumber specific hooks
     */
    VBankService.prototype.beforeFeature = function (_uri) {
        if (this.isServiceEnabled && this.isParallelizationEnabled) {
            browser_1["default"](SESSION_HEADER, this.vbankHost);
        }
    };
    VBankService.prototype.beforeScenario = function (uri, feature, scenario) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (feature.document) {
                            feature = feature.document.feature || feature;
                        }
                        if (!this.isServiceEnabled) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.update(scenario, feature)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    VBankService.prototype.afterScenario = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isServiceEnabled) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.teardown()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    VBankService.prototype.update = function (scenario, feature) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.workspacePath = this.getVBankWorkspacePath(scenario, feature);
                        if (!this.isParallelizationEnabled) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.startSession(this.workspacePath, this.isRecoding)];
                    case 1:
                        _a.currentSessionId = _b.sent();
                        datamanager_1["default"](SESSION_HEADER, this.currentSessionId);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.updateWorkspace(this.workspacePath)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    VBankService.prototype.teardown = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.currentSessionId) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.endSession(this.workspacePath, this.currentSessionId)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.currentSessionId = undefined;
                        this.workspacePath = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    VBankService.prototype.startSession = function (workspacePath, record) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            var _this = this;
            return __generator(this, function (_a) {
                url = this.getSessionEndpoint(workspacePath);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        log.info("starting session " + workspacePath + " (" + _this.mode().toUpperCase() + " - " + url + ")");
                        request
                            .post(url)
                            .on('response', function (response) {
                            var statusCode = response.statusCode, statusMessage = response.statusMessage;
                            if (statusCode >= 200 && statusCode < 300) {
                                log.info("session started successfully - (" + statusCode + ": " + statusMessage + ")");
                            }
                            else {
                                log.error("vbank session failed :-( - (" + statusCode + ": " + statusMessage + ")");
                                reject("vbank session failed :-( - (" + statusCode + ": " + statusMessage + ")");
                            }
                        })
                            .on('error', function (error) {
                            log.error("session could not be started - " + error);
                            reject(error);
                        })
                            .on('data', function (bufferedSessionId) {
                            var sessionId = bufferedSessionId.toString('utf8');
                            log.info("session id - (" + sessionId + ")");
                            resolve(sessionId);
                        });
                    })];
            });
        });
    };
    VBankService.prototype.endSession = function (workspacePath, sessionId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            var _this = this;
            return __generator(this, function (_a) {
                url = this.getSessionEndpoint(workspacePath, sessionId);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        log.info("ending session " + sessionId + " (" + _this.mode().toUpperCase() + " - " + url + ")");
                        request["delete"](url)
                            .on('response', function (response) {
                            var statusCode = response.statusCode, statusMessage = response.statusMessage;
                            log.info("session " + sessionId + " ended successfully - (" + statusCode + ": " + statusMessage + ")");
                            resolve(sessionId);
                        })
                            .on('error', function (error) {
                            log.error("session " + sessionId + " could not be ended - " + error);
                            reject();
                        });
                    })];
            });
        });
    };
    VBankService.prototype.updateWorkspace = function (workspacePath, record) {
        if (record === void 0) { record = false; }
        return __awaiter(this, void 0, void 0, function () {
            var url;
            var _this = this;
            return __generator(this, function (_a) {
                url = [this.endpoint(), "subdirectory=" + workspacePath].join('?');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        log.info("updating workspace (" + _this.mode().toUpperCase() + " to " + workspacePath + " (" + url + ")");
                        request
                            .put(url)
                            .on('response', function (response) {
                            var statusCode = response.statusCode, statusMessage = response.statusMessage;
                            log.info("workspace updated successfully - (" + statusCode + ": " + statusMessage + ")");
                            resolve(statusCode);
                        })
                            .on('error', function (error) {
                            log.error("workspace could not be updated - " + error);
                            reject();
                        });
                    })];
            });
        });
    };
    VBankService.prototype.getSessionEndpoint = function (workspacePath, sessionId) {
        if (sessionId === void 0) { sessionId = null; }
        var parts = [this.endpoint(), 'sessions'];
        if (sessionId) {
            parts.push(sessionId);
        }
        var url = parts.join('/');
        return [url, "subdirectory=" + workspacePath].join('?');
    };
    VBankService.prototype.endpoint = function () {
        return this.vbankAdminUri + "/api/default/" + (this.isRecoding ? 'record' : 'stubs');
    };
    VBankService.prototype.mode = function () {
        return this.isRecoding ? 'record' : 'replay';
    };
    return VBankService;
}());
exports.VBankService = VBankService;
//# sourceMappingURL=service.js.map