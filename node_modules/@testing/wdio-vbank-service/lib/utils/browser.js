"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
function applyHttpInterceptor(headerName, sessionId, vbankHost) {
    var vbankRegExp = new RegExp("^https?://" + vbankHost);
    //ES3 compatiblity
    function assign(target, _source1, _source2) {
        for (var i = 1; i < arguments.length; i++) {
            copy(target, arguments[i]);
        }
        return target;
    }
    function copy(target, source) {
        for (var key in source) {
            if (({}.hasOwnProperty).call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    try {
        var baseXHROpen_1 = XMLHttpRequest.prototype.open;
        var baseFetch_1 = window.fetch;
        XMLHttpRequest.prototype.open = function open(_method, url) {
            baseXHROpen_1.apply(this, arguments);
            if (vbankRegExp.test(url.toString())) {
                this.setRequestHeader(headerName, sessionId);
                this.withCredentials = true;
            }
        };
        if (window.fetch) {
            window.fetch = function (url, config) {
                return Promise.all([url, config])
                    .then(function (_a) {
                    var url = _a[0], _b = _a[1], config = _b === void 0 ? {} : _b;
                    if (vbankRegExp.test(url.toString())) {
                        var headers = config.headers ? config.headers : new Headers();
                        headers.append(headerName, sessionId);
                        config = assign({}, config, headers);
                    }
                    return [url, config];
                })
                    .then(function (_a) {
                    var url = _a[0], config = _a[1];
                    return baseFetch_1(url, config);
                });
            };
        }
    }
    catch (e) {
        return e;
    }
}
/** @internal */
function monkeyPatchBrowser(sessionHeader, vbankHost) {
    var browser = global.browser;
    function resetVBank() {
        return __awaiter(this, void 0, void 0, function () {
            var currentSessionId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentSessionId = global['vbank-session'];
                        if (!currentSessionId) return [3 /*break*/, 3];
                        return [4 /*yield*/, browser.setCookies({ name: 'vbank-session', value: currentSessionId })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, browser.execute(applyHttpInterceptor, sessionHeader, currentSessionId, vbankHost)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        console.info('VBank session not started. Might be that the mode is Synchronous...');
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    browser.addCommand('resetVBank', resetVBank);
    if (!browser.acis) {
        browser.overwriteCommand('url', function url(prev) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, prev.apply(void 0, args)];
                        case 1:
                            value = _a.sent();
                            return [4 /*yield*/, resetVBank()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, value];
                    }
                });
            });
        });
    }
}
exports["default"] = monkeyPatchBrowser;
//# sourceMappingURL=browser.js.map