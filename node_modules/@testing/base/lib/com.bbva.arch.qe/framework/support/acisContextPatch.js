"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchedContextHelper = void 0;
class PatchedContextHelper {
    constructor(patches) {
        this.patches = [];
        this.patches = global.ACIS_PATCHES = patches || global.ACIS_PATCHES || [];
    }
    registerPatch(patch) { this.patches.push(patch); }
    /**
     * Runs method in Acis patched context
     * @param target
     */
    runPatched(target) {
        if (global.ACIS_PATCHED) {
            return target();
        }
        let isPromise = false;
        global.ACIS_PATCHED = true;
        let unpatchContext = this.patches
            .map(patch => {
            try {
                return patch();
            }
            catch (e) {
                console.error(e);
            }
        })
            .filter(e => e);
        const unpatch = () => {
            unpatchContext.forEach(unpatchFn => {
                try {
                    unpatchFn();
                }
                catch (e) {
                    console.error(e);
                }
            });
            delete global.ACIS_PATCHED;
        };
        let result;
        try {
            result = target();
            if (result && result.then) {
                isPromise = true;
                result.then(res => {
                    unpatch();
                    return res;
                }, err => {
                    unpatch();
                    throw err;
                });
            }
        }
        catch (e) {
            unpatch();
            throw e;
        }
        if (!isPromise) {
            unpatch();
        }
        return result;
    }
}
/**
 * This is an internal ACIS object. Do not use unless previously agreed with global testing.
 */
exports.patchedContextHelper = new PatchedContextHelper();
//# sourceMappingURL=acisContextPatch.js.map