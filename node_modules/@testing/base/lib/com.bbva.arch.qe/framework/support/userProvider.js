"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserProvider = exports.Users = void 0;
const data_manager_js_client_1 = require("data-manager-js-client");
const logger_1 = require("./logger");
const logger = logger_1.getLogger('framework.support.datamanager');
/**
 * It allows us to retrieve the users that have been requested previously to
 * [DataManager](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/data-manager-js-client/browse).
 */
class Users {
}
exports.Users = Users;
/**
 * @hidden
 */
class PrivateUsers extends Users {
    constructor() {
        super(...arguments);
        this.users = new Map();
    }
    set(user, alias) {
        alias = (alias) ? alias : 'default_alias';
        this.users.set(alias, user);
    }
    get(alias) {
        return this.rawGet(alias).data;
    }
    rawGet(alias) {
        alias = (alias) ? alias : 'default_alias';
        return this.users.get(alias);
    }
    keys() {
        return this.users.keys();
    }
}
/**
 * Class which exposes an interface to interact with [DataManager](https://globaldevtools.bbva.com/data-manager),
 * a tool which allows us to store users' data classified according to specific requirements defined by tags.
 *
 * Those tags later help us retrieve users with the role that fulfills the necessary requirements to access
 * specific application flows we need to test.
 */
class UserProvider {
    /**
     * It creates an instance of the api that enables us to interact with
     * [DataManager](https://globaldevtools.bbva.com/data-manager).
     *
     * In order to get authenticated with Datamanager and access your team's profile successfully,
     * it's possible to pass-in a *DataManagerConfig* object setting with the necessary data â€“you can do
     * this with environment variables too. For more info, you can check the
     * **[DataManagerJsClient documentation](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/data-manager-js-client/browse)**.
     *
     * --
     *
     * @param config
     */
    constructor(config) {
        this._users = new PrivateUsers();
        this.dm = new data_manager_js_client_1.DataManager(config);
    }
    /**
     * It allows us to interact with the users requested previously to
     * [DataManager](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/data-manager-js-client/browse).
     *
     * --
     */
    get users() {
        return this._users;
    }
    /**
     * When no alias passed in, it clears all the users that have been previously requested to be
     * used during a test case; when alias is passed in, it clears the user's data stored under
     * such alias.
     *
     * --
     *
     * @param alias An optional string to identify an user, useful when more than one users' entries
     *  are needed for a test
     */
    clear(alias) {
        return __awaiter(this, void 0, void 0, function* () {
            if (alias) {
                const user = this._users.rawGet(alias);
                if (user) {
                    logger.debug(`Unlock user ${user.id} - `, JSON.stringify(user.data).substring(1, 50), '...');
                    yield this.dm.unlock(user.id, user.lock);
                    this._users.set(null, alias);
                }
            }
            else {
                for (const alias of this._users.keys()) {
                    yield this.clear(alias);
                }
            }
        });
    }
    /**
     * It searchs for an user in [DataManager](https://globaldevtools.bbva.com/data-manager)
     * matching the requirements defined by the tags passed in.
     *
     * --
     *
     * @param tags A comma separated list of tags to find an user in DataManager matching the
     *   requirements defined by those tags
     * @param alias An optional string to identify an user, useful when more than one users' entries
     *   are needed for a test
     * @param exclusiveLock  Truthy if the data should only be available for this test during its
     *   execution
     */
    addUserByTags(tags, alias, exclusiveLock = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.dm.findOne({
                tags: tags.split(','),
                lock: exclusiveLock
            });
            yield this.clear(alias);
            logger.debug(`Add user ${user.id} - ${user.lock}`, JSON.stringify(user.data).substring(1, 50), '...');
            this._users.set(user, alias);
        });
    }
}
exports.UserProvider = UserProvider;
//# sourceMappingURL=userProvider.js.map