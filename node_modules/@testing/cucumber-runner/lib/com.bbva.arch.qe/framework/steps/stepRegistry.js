"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStepClassInstance = exports.Then = exports.When = exports.Given = void 0;
/**
 * A [step definition](https://github.com/cucumber/cucumber-js/blob/main/docs/support_files/step_definitions.md)
 * is a function with an expression that's linked to one or more
 * [Gherkin](https://cucumber.io/docs/gherkin/reference/) steps. It'll be executed when
 * the Guerkin expression passed as parameter matches with the one in the step of the feature's
 * scenario processed by the test-runner in a given moment.
 *
 * -----------------------
 *
 * @module steps
 */
const cucumber_1 = require("cucumber");
const base_1 = require("@testing/base");
class Step {
}
/**
 * The purpose of *Given* steps is defining the preconditions (initial state or context)
 * required to start interacting with the system.
 *
 * This function offers a decorator to be used with @Given('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { Given } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @Given(/^I'm a user with tags "([^"]*)" \[framework\]$/)
 *           getUser(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
function Given(text) {
    return (target, propertyKey, descriptor) => {
        stepRegistry.register({ regexp: text, target, propertyKey, descriptor });
    };
}
exports.Given = Given;
/**
 * The purpose of *When* steps is defining the action to be performed once the precondition has
 * been fulfilled. This can be a person interacting with the system, or it can be an event
 * triggered by another system.
 *
 * This function offers a decorator to be used with @When('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { When } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @When(/^I add the product to the cart$/)
 *           addProductToCart(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
exports.When = Given;
/**
 * The purpose of *Then* steps is defining the expected result from the action taken by @When.
 *
 * This function offers a decorator to be used with @Then('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { Then } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @Then(/^I should see a confirmation message$/)
 *           checkConfirmationMessage(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
exports.Then = Given;
/**
 * @hidden
 */
class StepRegistry {
    constructor() {
        this.steps = [];
        const self = this;
        cucumber_1.Before(function () {
            return self.initClasses(this);
        });
    }
    initClasses(world) {
        this.steps.map(s => s.target)
            .forEach(t => {
            t.constructor.__instance = new t.constructor(world);
        });
    }
    register(step) {
        this.steps.push(step);
        const target = (step.target[step.propertyKey]);
        const isAsync = target.constructor.name === "AsyncFunction";
        const params = target.length;
        const wrapperFn = isAsync ?
            async function () {
                return base_1.patchedContextHelper.runPatched(() => target.apply(step.target.constructor.__instance, arguments));
            } :
            function () {
                return base_1.patchedContextHelper.runPatched(() => target.apply(step.target.constructor.__instance, arguments));
            };
        const binding = { [target.name]: wrapperFn }[target.name];
        Object.defineProperty(binding, "length", {
            value: params
        });
        cucumber_1.When(step.regexp, binding);
    }
}
const stepRegistry = new StepRegistry();
/**
 * It returns the instance of a step class â€”a Class containing steps exported in
 * a file named **\*.steps.ts**.
 *
 * Example:
 *
 *    ```typescript
 *       import { Then, getStepClassInstance } from "@testing/cucumber-runner";
 *       import { expect } from 'chai';
 *
 *       export class ExampleSteps {
 *
 *           property: string = "Initial value";
 *
 *           @Then(/^I'm a singleton$/)
 *           getInstance() {
 *               const myInstance = getStepClassInstance(CategorySteps);
 *               expect(myInstance.property).to.eq(this.property);
 *           }
 *       }
 *   ```
 *
 * @param clazz The class to get the instance from
 */
function getStepClassInstance(clazz) {
    return (clazz && clazz.__instance);
}
exports.getStepClassInstance = getStepClassInstance;
//# sourceMappingURL=stepRegistry.js.map