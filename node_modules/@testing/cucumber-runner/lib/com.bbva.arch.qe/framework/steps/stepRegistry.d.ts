/**
 * The purpose of *Given* steps is defining the preconditions (initial state or context)
 * required to start interacting with the system.
 *
 * This function offers a decorator to be used with @Given('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { Given } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @Given(/^I'm a user with tags "([^"]*)" \[framework\]$/)
 *           getUser(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
export declare function Given(text: string | RegExp): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
/**
 * The purpose of *When* steps is defining the action to be performed once the precondition has
 * been fulfilled. This can be a person interacting with the system, or it can be an event
 * triggered by another system.
 *
 * This function offers a decorator to be used with @When('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { When } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @When(/^I add the product to the cart$/)
 *           addProductToCart(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
export declare const When: typeof Given;
/**
 * The purpose of *Then* steps is defining the expected result from the action taken by @When.
 *
 * This function offers a decorator to be used with @Then('step text') right before the
 * step method of a class.
 *
 * Example:
 *
 *   ```typescript
 *      import { Then } from '@testing/cucumber-runner';
 *
 *      export class ExampleSteps {
 *
 *           @Then(/^I should see a confirmation message$/)
 *           checkConfirmationMessage(tags: string) { // code setting action }
 *      }
 *   ```
 *
 * @param text String or RegExp to be binded to the step method
 */
export declare const Then: typeof Given;
/**
 * It returns the instance of a step class â€”a Class containing steps exported in
 * a file named **\*.steps.ts**.
 *
 * Example:
 *
 *    ```typescript
 *       import { Then, getStepClassInstance } from "@testing/cucumber-runner";
 *       import { expect } from 'chai';
 *
 *       export class ExampleSteps {
 *
 *           property: string = "Initial value";
 *
 *           @Then(/^I'm a singleton$/)
 *           getInstance() {
 *               const myInstance = getStepClassInstance(CategorySteps);
 *               expect(myInstance.property).to.eq(this.property);
 *           }
 *       }
 *   ```
 *
 * @param clazz The class to get the instance from
 */
export declare function getStepClassInstance<T extends Object>(clazz: {
    new (..._: any[]): T;
}): T;
//# sourceMappingURL=stepRegistry.d.ts.map