import { findShadowElement as findShadowElement } from './shadowElement';
import { isElementDisplayed as isElementDisplayed, VisibilityCheckConfig as VisibilityCheckConfigImported, VisibilityCheckOptions } from './isElementDisplayed';
export declare type VisibilityCheckConfig = VisibilityCheckConfigImported;
/**
 * @hidden
 * @param a
 * @param b
 */
export declare function intersect(a: any[], b: any[]): any[];
declare type Intersect = typeof intersect;
declare type FindShadowElement = typeof findShadowElement;
declare type IsElementDisplayed = typeof isElementDisplayed;
export interface ElementMatchingInput {
    wrapperSelector: string;
    additionalSelectors: string[];
    visibilityCheckConfig: VisibilityCheckConfig;
}
export interface FrontElementMatchingInput {
    wrapperSelector?: string;
    additionalSelectors?: string[];
    options?: VisibilityCheckOptions;
}
/**
 * @hidden
 * @param findShadowElement
 * @param intersect
 * @param filter
 * @param SHADOW_PREFIX
 * @param IsElementDisplayed
 */
export declare function filterExistingSelectors(findShadowElement: FindShadowElement, intersect: Intersect, SHADOW_PREFIX: string, isElementDisplayed: IsElementDisplayed): (root: any, matchers: FrontElementMatchingInput[], ...filter: string[] | Element[]) => any[];
/**
 * @hidden
 */
export declare function getElementsMatching(container: WebdriverIO.Element, filter: string | WebdriverIO.Element[], matchers: ElementMatchingInput[]): WebdriverIO.Element[][];
export {};
//# sourceMappingURL=selectors.d.ts.map