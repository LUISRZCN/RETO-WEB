"use strict";
exports.__esModule = true;
exports.init = exports.patches = void 0;
var util_1 = require("util");
var utils_1 = require("webdriverio/build/utils");
function patches(browser) {
    var offsetY = null;
    var offsetX = null;
    var ELEMENTID = "element-6066-11e4-a52e-4f735466cecf";
    var patches = {};
    patches.check = function () {
        return (!browser.isMobile && browser.capabilities.browserName.toLowerCase() === 'safari') || browser.isIOS;
    };
    patches.clearValue = function clearValue(prev) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (browser.capabilities.browserName.toLowerCase() === 'safari') {
            browser.execute(function (elem) {
                elem.value = '';
            }, this);
        }
        else {
            return prev.apply(void 0, args);
        }
    };
    patches.addValue = function addValue(prev) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!browser.isMobile && browser.capabilities.browserName.toLowerCase() === 'safari') {
            var value = util_1.isString(args[0]) ? args[0].split('') : args[0];
            if (util_1.isArray(value)) {
                var mode = browser.safeMode();
                try {
                    browser.safeMode({ notAnimating: false, scrollIntoView: false });
                    this.click({ x: 10 });
                    value.forEach(function (key) { return browser.keys(key); });
                }
                finally {
                    browser.safeMode(mode);
                }
                return;
            }
        }
        return prev.apply(void 0, args);
    };
    function setValueFromXPath(selector) {
        var _a;
        this.waitForEnabled();
        var optionElement = utils_1.getElementFromResponse(browser.findElementFromElement(this.elementId, 'xpath', selector));
        return browser.execute(function (elem, option) {
            elem.value = option.value;
        }, this, (_a = {}, _a[ELEMENTID] = optionElement, _a["ELEMENT"] = optionElement, _a));
    }
    patches.selectByVisibleText = function selectByVisibleText(_prev, text) {
        var formatted = /"/.test(text)
            ? 'concat("' + text.trim().split('"').join('", \'"\', "') + '")'
            : "\"" + text.trim() + "\"";
        var normalized = "[normalize-space(text()) = " + formatted + "]";
        return setValueFromXPath.bind(this)("./option" + normalized + "|./optgroup/option" + normalized);
    };
    patches.selectByIndex = function selectByIndex(_prev, index) {
        return setValueFromXPath.bind(this)("./option[position() = " + (index + 1) + "]");
    };
    patches.selectByAttribute = function selectByAttribute(_prev, name, value) {
        var normalized = "[normalize-space(@" + name.trim() + ") = \"" + value.trim() + "\"]";
        return setValueFromXPath.bind(this)("./option" + normalized + "|./optgroup/option" + normalized);
    };
    patches.click = function click(_prev, options) {
        options = options || {};
        if (browser.isWebApplication() || browser.getContext() !== 'NATIVE_APP') {
            this.scrollIntoView();
        }
        if (browser.isMobile) {
            if (offsetY === null && browser.getContext() !== 'NATIVE_APP') {
                offsetY = 0;
                offsetX = 0;
                browser.switchContext('NATIVE_APP');
                var selector = '//XCUIElementTypeWebView';
                try {
                    var view = void 0;
                    while (view = $(selector)) {
                        var viewLoc = view.getLocation();
                        offsetY += viewLoc.y;
                        offsetX += viewLoc.x;
                        selector += '/..';
                    }
                }
                catch (e) {
                    // Doesn't have parent
                }
                browser.goWebContext();
            }
        }
        else {
            var scroll_1 = browser.execute(function () { return ({ x: window.scrollX, y: window.scrollY }); });
            offsetX = -scroll_1.x;
            offsetY = -scroll_1.y;
        }
        var pos = browser.getElementRect(this.elementId);
        var innerX = options.x || Math.round(pos.width / 2);
        var innerY = options.y || Math.round(pos.height / 2);
        return browser.performActions([{
                'type': 'pointer',
                'id': 'finger',
                'parameters': { 'pointerType': 'mouse' },
                'actions': [
                    {
                        'type': 'pointerMove',
                        'duration': 100,
                        'x': Math.floor(pos.x + innerX + offsetX),
                        'y': Math.floor(pos.y + innerY + offsetY)
                    },
                    { 'type': 'pointerDown', 'button': options.button || 0 },
                    { 'type': 'pause', 'duration': 200 },
                    { 'type': 'pointerUp', 'button': options.button || 0 }
                ]
            }]);
    };
    return patches;
}
exports.patches = patches;
function init(_browser) {
    //Pathing here would override safe commands :-(
}
exports.init = init;
//# sourceMappingURL=apple-fix.js.map