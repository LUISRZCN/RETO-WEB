"use strict";
exports.__esModule = true;
exports.clear = exports.init = void 0;
var fs_1 = require("fs");
var testability = fs_1.readFileSync(require.resolve('testability.js')).toString();
var browserInstrumentation = require('testability-browser-bindings');
var ScriptResults;
(function (ScriptResults) {
    ScriptResults["Timeout"] = "TIMED_OUT";
    ScriptResults["NotLoaded"] = "NOT_LOADED";
})(ScriptResults || (ScriptResults = {}));
function init(browser) {
    browser.addCommand('waitForApplicationToCompleteTasks', function () {
        var _a;
        try {
            if (browser.getContext && browser.getContext() === 'NATIVE_APP') {
                return;
            }
            var result = browser.executeAsync(function (ScriptResults, cb) {
                function resolve(s) {
                    if (cb) {
                        cb(s);
                    }
                    clearInterval(interval);
                    cb = null;
                }
                var w = window;
                //Use interval for timeout as it's not tracked by testability
                var interval = setInterval(function () {
                    resolve(ScriptResults.Timeout);
                    w.testability.reset();
                }, 25000);
                return w.testability ?
                    w.testability.when.ready(function () {
                        setTimeout(resolve);
                    }) :
                    resolve(ScriptResults.NotLoaded);
            }, ScriptResults);
            if (result === ScriptResults.NotLoaded) {
                browser.loadTestabilityAwaiter();
                return browser.waitForApplicationToCompleteTasks();
            }
            else if (result === ScriptResults.Timeout) {
                var config = (_a = browser.config) === null || _a === void 0 ? void 0 : _a.acisOpts;
                var testabilityOptions = config === null || config === void 0 ? void 0 : config.testabilityOpts;
                if (testabilityOptions === null || testabilityOptions === void 0 ? void 0 : testabilityOptions.failOnTimeout) {
                    console.warn("Testability timed out... failOnTimeout is true. Forcing error");
                    throw new Error("Testability timed out waiting for action. Please, report this error to global.testing.team@bbva.com");
                }
                else {
                    console.warn("Testablity timed out... This is weird, but might be that the application is taking too long to load. We will try to keep on, but please report to global.testing.team@bbva.com");
                }
            }
        }
        catch (error) {
            console.error(error);
            throw new Error('Error while waiting to sync with the page. ' + error);
        }
    });
    browser.addCommand('loadTestabilityAwaiter', function () {
        if (browser.isIOS) {
            var timeouts = browser.getTimeouts();
            if (!timeouts.script) {
                browser.setTimeout({
                    script: 30000
                });
            }
        }
        var config = browser.config && browser.config.acisOpts;
        var testabilityOptions = config && config.testabilityOpts;
        //We need to serialize regexp :-(
        var testabilityOptionsString = testabilityOptions && JSON.stringify(testabilityOptions, function (_key, value) {
            if (value instanceof RegExp) {
                return "__REGEXP " + value.toString();
            }
            return value;
        });
        function initOptions(testabilityOptionsString) {
            return testabilityOptionsString && JSON.parse(testabilityOptionsString, function (key, value) {
                if (value && value.toString().indexOf("__REGEXP ") === 0) {
                    var m = value.split("__REGEXP ")[1].match(/\/(.*)\/(.*)?/);
                    return new RegExp(m[1], m[2] || "");
                }
                else {
                    return value;
                }
            });
        }
        //define = undefined to avoid loading testability through AMD.
        browser.execute("\n            var define = undefined;\n            var w = window;\n            if (!w.testability) {\n                (function(){" + testability + "}.bind(w))();\n                var testabilityOptionsString = (" + initOptions + ")(arguments[0]);\n                (" + browserInstrumentation + ")(w, testabilityOptionsString);\n            }\n        ", testabilityOptionsString);
    });
}
exports.init = init;
function clear() {
}
exports.clear = clear;
//# sourceMappingURL=testability.js.map