"use strict";
exports.__esModule = true;
exports.findShadowElement = exports.findElementBuilder = exports.SHADOW_PREFIX = void 0;
exports.SHADOW_PREFIX = "/deep/ ";
function findElementBuilder(selector, multiple) {
    if (multiple === void 0) { multiple = false; }
    return eval("function findElement(parent) {\n      var shadowPrefix = new RegExp('^" + exports.SHADOW_PREFIX + "')\n      return (" + findShadowElement + ")(parent || document, " + JSON.stringify(selector) + ".replace(shadowPrefix, ''), " + multiple + ", this);\n    }; findElement;");
}
exports.findElementBuilder = findElementBuilder;
function findShadowElement(root, selector, multiple, baseElement) {
    function querySelectorAllDeep(root, selector) {
        return _querySelectorDeep(root, selector, true);
    }
    function querySelectorDeep(root, selector) {
        return _querySelectorDeep(root, selector);
    }
    function _querySelectorDeep(root, selector, findMany) {
        if (findMany === void 0) { findMany = false; }
        var lightElement = root.querySelector(selector);
        var head = (root.ownerDocument || root).head;
        if (head.createShadowRoot || head.attachShadow) {
            // no need to do any special if selector matches something specific in
            // light-dom
            if (!findMany && lightElement) {
                return lightElement;
            }
            // do best to support complex selectors and split the query
            var splitSelector = selector.match(/(([^\s\"']+\s*[,>+~]\s*)+|\'[^']*\'+|\"[^\"]*\"+|[^\s\"']+)+/g) || [];
            var possibleElementsIndex = splitSelector.length - 1;
            var possibleElements = collectAllElementsDeep(root, splitSelector[possibleElementsIndex]);
            var findElements = findMatchingElement(root, splitSelector, possibleElementsIndex);
            if (findMany) {
                return possibleElements.filter(findElements);
            }
            else {
                return possibleElements.find(findElements);
            }
        }
        else {
            if (!findMany) {
                return lightElement;
            }
            else {
                return root.querySelectorAll(selector);
            }
        }
    }
    function findMatchingElement(root, splitSelector, possibleElementsIndex) {
        return function (element) {
            var position = possibleElementsIndex;
            var parent = element;
            var foundElement = false;
            while (parent && parent.matches) {
                var foundMatch = parent.matches(splitSelector[position]);
                if (foundMatch && position === 0) {
                    foundElement = true;
                    break;
                }
                if (foundMatch) {
                    position--;
                }
                parent = findParentOrHost(root, parent);
            }
            return foundElement;
        };
    }
    function findParentOrHost(root, element) {
        var parentNode = element.parentNode;
        return parentNode && parentNode.host && parentNode.tagName !== 'A'
            ? parentNode.host
            : parentNode === root
                ? null
                : parentNode;
    }
    function collectAllElementsDeep(root, selector) {
        var allElements = [];
        var findAllElements = function (nodes) {
            for (var i = 0, el = void 0; (el = nodes[i]); ++i) {
                allElements.push(el);
                // If the element has a shadow root, dig deeper.
                if (el.shadowRoot) {
                    findAllElements(el.shadowRoot.querySelectorAll('*'));
                }
            }
        };
        findAllElements(root.querySelectorAll('*'));
        return selector
            ? allElements.filter(function (el) { return el.matches(selector); })
            : allElements;
    }
    var result;
    if (!selector) {
        return baseElement || (root.ownerDocument || root).documentElement;
    }
    if (multiple) {
        result = querySelectorAllDeep(root, selector) || [];
        if (root.shadowRoot) {
            result = result.concat(querySelectorAllDeep(root.shadowRoot, selector));
        }
    }
    else {
        result = querySelectorDeep(root, selector) ||
            (root.shadowRoot && querySelectorDeep(root.shadowRoot, selector));
    }
    return result;
}
exports.findShadowElement = findShadowElement;
//# sourceMappingURL=shadowElement.js.map