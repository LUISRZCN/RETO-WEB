"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.getAcisOpts = exports.parseSelector = exports.elementsOutputMapper = exports.elementOutputMapper = exports.cleanElement = exports.browserWrapper = exports.SelectorType = exports.ELEMENT_KEY = void 0;
var util_1 = require("util");
exports.ELEMENT_KEY = 'element-6066-11e4-a52e-4f735466cecf';
var browser_polyfills_1 = require("./browser_polyfills");
var findStrategy_1 = require("webdriverio/build/utils/findStrategy");
var shadowElement_1 = require("./shadowElement");
var SelectorType;
(function (SelectorType) {
    SelectorType["unknown"] = "unknown";
    SelectorType["id"] = "id";
    SelectorType["css"] = "css selector";
    SelectorType["deep"] = "deep css selector";
    SelectorType["xpath"] = "xpath";
    SelectorType["link"] = "link text";
    SelectorType["partialLink"] = "partial link text";
    SelectorType["name"] = "name";
    SelectorType["tagName"] = "tag name";
    SelectorType["className"] = "class name";
    SelectorType["androidUiAutomator"] = "-android uiautomator";
    SelectorType["androidDataMatcher"] = "-android datamatcher";
    SelectorType["iosUiAutomation"] = "-ios uiautomation";
    SelectorType["iosPredicateString"] = "-ios predicate string";
    SelectorType["iosClassChain"] = "-ios class chain";
    SelectorType["accessibilityId"] = "accessibility id";
})(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
function browserWrapper(f) {
    function mapper(param) {
        if (util_1.isFunction(param)) {
            return param.toString();
        }
        else if (param && param.ELEMENT) {
            return param;
        }
        return JSON.stringify(param);
    }
    return (function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return "\n        " + browser_polyfills_1.buildPolyfills() + ";\n        return (" + f + ")(" + params.map(mapper).join(',') + ").apply(null, arguments);\n    ";
    });
}
exports.browserWrapper = browserWrapper;
function cleanElement(element) {
    var _a;
    if (!element.elementId) {
        throw new Error("The element with selector \"" + element.selector + "\" you trying to pass into the execute method wasn't found");
    }
    return _a = {},
        _a[exports.ELEMENT_KEY] = element.elementId,
        _a.ELEMENT = element.elementId,
        _a;
}
exports.cleanElement = cleanElement;
function elementOutputMapper(selector, element, parent) {
    var _a;
    var value = (parent ? parent.$.bind(parent) : $)(__assign((_a = {}, _a[exports.ELEMENT_KEY] = element ? element.ELEMENT || element[exports.ELEMENT_KEY] : '', _a), element));
    value.selector = selector;
    return value;
}
exports.elementOutputMapper = elementOutputMapper;
function elementsOutputMapper(selector, elements, parent) {
    return elements.map(function (element) { return elementOutputMapper(selector, element, parent); });
}
exports.elementsOutputMapper = elementsOutputMapper;
function parseSelector(selector) {
    if (typeof selector !== 'string') {
        return {
            using: SelectorType.unknown,
            value: selector
        };
    }
    if (selector.startsWith(shadowElement_1.SHADOW_PREFIX)) {
        return {
            using: SelectorType.deep,
            value: selector.substring(shadowElement_1.SHADOW_PREFIX.length)
        };
    }
    return findStrategy_1.findStrategy(selector, browser.isW3C, browser.isMobile);
}
exports.parseSelector = parseSelector;
function getAcisOpts(browser) {
    var config = (browser && browser.config);
    return config && config.acisOpts;
}
exports.getAcisOpts = getAcisOpts;
//# sourceMappingURL=utils.js.map