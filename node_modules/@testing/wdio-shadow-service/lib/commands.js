"use strict";
exports.__esModule = true;
exports.init = exports.deep = void 0;
var shadowElement_1 = require("./shadowElement");
var utils_1 = require("./utils");
var boxen = require("boxen");
var switch_windows_wait_1 = require("./switch-windows-wait");
//Provides a deep selector that traversed shadow DOM transparently
// $(deep('#parentidWithShadowRoot #childId'))
exports.deep = shadowElement_1.findElementBuilder;
function warn(msg) {
    var MAX = 70;
    var currentLength = 0;
    msg = msg.split(' ').map(function (s) {
        if (s.indexOf('\n') > 0) {
            currentLength = s.split('\n')[1].length;
            return s;
        }
        if (currentLength + s.length > MAX) {
            currentLength = 0;
            s = '\n' + s;
        }
        currentLength += s.length;
        return s;
    }).join(' ');
    console.warn("\n" + boxen(msg.replace(/ +/g, ' '), {
        borderStyle: "round",
        borderColor: "yellow",
        align: "center",
        float: "center",
        padding: 1
    }));
}
function init(browser) {
    browser.addCommand('deep$', function deep$(selector) {
        return $(exports.deep(selector, false));
    });
    browser.addCommand('deep$$', function deep$$(selector) {
        return $$(exports.deep(selector, true));
    });
    browser.addCommand('deep$', function deep$(selector) {
        return utils_1.elementOutputMapper(selector, browser.execute(exports.deep(selector, false), this), this);
    }, true);
    browser.addCommand('deep$$', function deep$$(selector) {
        return utils_1.elementsOutputMapper(selector, browser.execute(exports.deep(selector, true), this), this);
    }, true);
    browser.addCommand('old$', function deep$(selector) {
        return this.$(selector);
    });
    browser.addCommand('old$$', function deep$$(selector) {
        return this.$$(selector);
    });
    browser.addCommand('old$', function deep$(selector) {
        return this.$(selector);
    }, true);
    browser.addCommand('old$$', function deep$$(selector) {
        return this.$$(selector);
    }, true);
    browser.addCommand('switchWindowWait', function (urlOrTitle, timeout, interval, msgError) {
        switch_windows_wait_1.switchWindowWait(urlOrTitle, timeout, msgError, interval);
    });
    var checkSelector = function (selector) {
        var genericMsg = "Try to use only non structural tags, non style class names, immutable identifiers and relevant tag attribute values. Also check https://webdriver.io/docs/selectors.html for different selector strategies.";
        if (typeof selector === 'string') {
            var parsed = utils_1.parseSelector(selector);
            if (parsed.using === utils_1.SelectorType.css || parsed.using === utils_1.SelectorType.deep) {
                var components = parsed.value.split(/[#\s\.\[\]:>]/);
                if (components.length > 10) {
                    warn("Selector '" + selector + "' seems to be to fragile (long). Please refactor to make it smaller. " + genericMsg);
                }
                if (components.find(function (part) { return part.toLowerCase().match(/(span|div)/g); })) {
                    warn("Avoid including div|span tag names in selectors like '" + selector + "' as those doesn't provide too much information and they might be changed easily by the application developers. " + genericMsg);
                }
                if (components.find(function (part) { return part.match(/(first|last|nth|nth-last)-child/g); })) {
                    warn("Avoid relying in tag order for selectors like '" + selector + "' as it's too fragile. If you want to select a list element by it's index consider using 'nth-of-type' instead. " + genericMsg);
                }
            }
        }
    };
    function useDeep(selector, deep) {
        var parsed = utils_1.parseSelector(selector);
        deep = typeof deep === 'boolean' ? deep : utils_1.getAcisOpts(browser).deepSelectorsByDefault;
        return (deep && parsed.using === utils_1.SelectorType.css) || parsed.using === utils_1.SelectorType.deep;
    }
    var $rewrite = function (new$) { return function (old$, selector, deep) {
        checkSelector(selector);
        if (typeof selector === 'string' && useDeep(selector, deep)) {
            return browser[new$](selector);
        }
        return old$(selector);
    }; };
    var $rewriteElement = function (new$) { return function (old$, selector, deep) {
        checkSelector(selector);
        if (typeof selector === 'string' && useDeep(selector, deep)) {
            return this[new$](selector);
        }
        return old$(selector);
    }; };
    // We override the $ command so that $('/deep/ #id') is equivalent to
    // browser.deep$('#id')
    browser.overwriteCommand('$', $rewrite('deep$'), false);
    browser.overwriteCommand('$$', $rewrite('deep$$'), false);
    browser.overwriteCommand('$', $rewriteElement('deep$'), true);
    browser.overwriteCommand('$$', $rewriteElement('deep$$'), true);
    browser.overwriteCommand('debug', function (prev) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        patchBrowserForDebug();
        prev.apply(void 0, args);
    });
    browser.overwriteCommand('pause', function (prev) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        warn("\n        -- PAUSE MAY ONLY BE USED FOR DEBUGGING --\n        Please refactor your code to use waitUntil instead:\n        https://webdriver.io/docs/api/browser/waitUntil.html\n        If the app is not giving any clue (loading spinner,\n        disabled buttons, etc) while it's charging, this is an\n        application issue as the user might click something if\n        he is fast enough as the test just did. Talk with the\n        development responsible to include a loading feedback\n        or to disable the elements.");
        patchBrowserForDebug();
        return prev.apply(void 0, args);
    });
    return browser;
}
exports.init = init;
function patchBrowserForDebug() {
    browser.execute(utils_1.browserWrapper(function (findShadowElement, SHADOW_PREFIX) {
        return function () {
            var root = document;
            root.acisDeepQuerySelector = function (selector) {
                return findShadowElement(document, selector.replace(SHADOW_PREFIX, ''), false, window);
            };
            root.acisDeepQuerySelectorAll = function (selector) {
                return findShadowElement(document, selector.replace(SHADOW_PREFIX, ''), true, window);
            };
        };
    })(shadowElement_1.findShadowElement, shadowElement_1.SHADOW_PREFIX));
}
//# sourceMappingURL=commands.js.map