"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.init = exports.reset = exports.checkIntoPage = void 0;
var util_1 = require("util");
var shadowElement_1 = require("./shadowElement");
var isElementDisplayed_1 = require("./isElementDisplayed");
var utils_1 = require("./utils");
var _ = require("lodash");
var selectors_1 = require("./selectors");
var FRAME_ID_KEY = '_acis_frame_id';
var currentFrame = [];
function switchToSingleFrame($switchToFrame, frame) {
    var frameFields = util_1.isObject(frame) && Object.keys(frame);
    if (frameFields && frameFields.length === 1 && frameFields[0] === FRAME_ID_KEY) {
        var frameElement_1 = $("[" + FRAME_ID_KEY + "='" + frame[FRAME_ID_KEY] + "']");
        $switchToFrame(frameElement_1);
    }
    else {
        $switchToFrame(frame);
    }
}
function checkIntoPage(url, selectors) {
    var result = checkIntoPageInternal(url, selectors.map(function (s) { return ({
        wrapperSelector: s.wrapperSelector,
        additionalSelectors: s.additionalSelectors,
        options: isElementDisplayed_1.getConfigFromVisibilityCheckType(s.visibilityCheckConfig)
    }); }));
    var output = {
        selectors: {},
        frames: {}
    };
    if (result && result.matches) {
        Object.keys(result.matches).forEach(function (framePath) {
            var matches = result.matches[framePath];
            var path = JSON.parse(framePath);
            matches.filter(function (match) { return match.isVisible; }).forEach(function (match) {
                output.selectors[match.url] = __spreadArrays((output.selectors[match.url] || []), match.selectors);
                match.selectors.forEach(function (s) {
                    if (!output.frames['' + s]) {
                        output.frames['' + s] = path;
                    }
                });
            });
        });
    }
    return output;
}
exports.checkIntoPage = checkIntoPage;
function checkIntoPageInternal(url, selectors, framePath, isVisible) {
    if (framePath === void 0) { framePath = []; }
    if (isVisible === void 0) { isVisible = true; }
    if (selectors.reduce(function (a, i) { return a
        .concat(i.additionalSelectors || [])
        .concat(i.wrapperSelector ? [i.wrapperSelector] : []); }, [])
        .map(utils_1.parseSelector)
        .map(function (data) { return data.using; })
        .find(function (type) { return type !== utils_1.SelectorType.css && type !== utils_1.SelectorType.deep; })) {
        throw Error('Only css or deep selectors are supported right now in Acis, please change the selector to css.' + JSON.stringify(selectors));
    }
    var result = JSON.parse(browser.execute(utils_1.browserWrapper(checkIntoAccesible)(shadowElement_1.findShadowElement, shadowElement_1.SHADOW_PREFIX, FRAME_ID_KEY, isElementDisplayed_1.isElementDisplayed, selectors_1.filterExistingSelectors, selectors_1.intersect), url, selectors, framePath, isVisible));
    if (result && result.notAccesible && result.notAccesible.length > 0) {
        var matchesNotAccesibles = result.notAccesible.map(function (f) { return checkUrlIntoNotAccesible(url, selectors, f, framePath, isVisible); })
            .reduce(function (acc, next) { return (__assign(__assign({}, acc), next.matches)); }, {});
        result.matches = __assign(__assign({}, result.matches), matchesNotAccesibles);
    }
    return result;
}
function checkUrlIntoNotAccesible(url, selectors, frame, framePath, isVisible) {
    var result = {};
    browser.switchToFrame(framePath);
    try {
        var elem = browser.$("[" + FRAME_ID_KEY + "='" + frame[FRAME_ID_KEY] + "']");
        isVisible = isVisible && browser.execute(isElementDisplayed_1.isElementDisplayed, elem, { autoScroll: false, visibleOutsideViewport: false });
        if (isVisible) {
            browser.switchToFrame(__spreadArrays(framePath, [frame]));
            result = checkIntoPageInternal(url, selectors, __spreadArrays(framePath, [frame]), isVisible);
        }
        //May be the element disappeared
    }
    catch (_e) { }
    browser.switchToFrame(framePath);
    return result;
}
function checkIntoAccesible(findShadowElement, shadowPrefix, FRAME_ID_KEY, isElementDisplayed, filterExistingSelectors, intersect) {
    return function (url, selectors, framePath, isVisible) {
        function deepCheckIntoAccesibleBuilder(url, selectors, framePath, root, isVisible) {
            var _a;
            var filteredMatchers = filterExistingSelectors(findShadowElement, intersect, shadowPrefix, isElementDisplayed)(root, selectors).pop();
            var foundSelectors = filteredMatchers
                .map(function (items, ix) { return (items.length > 1) && ix; })
                .filter(function (ix) { return ix || ix === 0; });
            var currentUrl = url.filter(function (u) { return !u || new RegExp(u).test(root.location.href); });
            var matches = foundSelectors.length > 0 ? (_a = {}, _a[JSON.stringify(framePath)] = currentUrl.map(function (u) { return ({ selectors: foundSelectors, url: u, isVisible: isVisible }); }), _a) : {};
            var tagIFrames = findShadowElement(root, "iframe", true, null);
            var tagFrames = findShadowElement(root, "frame", true, null);
            var frames = Array.from(tagIFrames).concat(Array.from(tagFrames));
            if (frames && frames.length > 0) {
                frames.filter(function (f) { return !f.getAttribute(FRAME_ID_KEY); }).forEach(function (f) { return f.setAttribute(FRAME_ID_KEY, Math.floor(Math.random() * 10000)); });
                var result = frames.filter(function (f) { return f.contentDocument; })
                    .map(function (f) {
                    var _a;
                    return deepCheckIntoAccesibleBuilder(url, selectors, __spreadArrays(framePath, [(_a = {}, _a[FRAME_ID_KEY] = f.getAttribute(FRAME_ID_KEY), _a)]), f.contentDocument, isVisible && isElementDisplayed(f, { autoScroll: false, visibleOutsideViewport: false }));
                })
                    .reduce(function (acc, next) { return (__assign(__assign({}, acc), next.matches)); }, {});
                var notAccesible = frames.filter(function (f) { return !f.contentDocument; }).map(function (f) {
                    var _a;
                    return (_a = {}, _a[FRAME_ID_KEY] = f.getAttribute(FRAME_ID_KEY), _a);
                });
                return { matches: __assign(__assign({}, matches), result), notAccesible: notAccesible };
            }
            else {
                return { matches: matches };
            }
        }
        return JSON.stringify(deepCheckIntoAccesibleBuilder(url, selectors, framePath, document, isVisible));
    };
}
function reset() {
    currentFrame = [];
}
exports.reset = reset;
function init(browser) {
    browser.overwriteCommand('switchToFrame', function switchToFrame($switchToFrame, frame) {
        var nextFrame = util_1.isArray(frame) ? frame : [frame];
        if (!_.isEqual(currentFrame[currentFrame.length - 1], nextFrame[nextFrame.length - 1])) {
            currentFrame = nextFrame;
            if (util_1.isArray(frame)) {
                $switchToFrame(null);
                frame.forEach(function (f) { return switchToSingleFrame($switchToFrame, f); });
            }
            else {
                currentFrame = __spreadArrays(currentFrame, [frame]);
                switchToSingleFrame($switchToFrame, frame);
            }
        }
    });
    browser.addCommand('getCurrentFrame', function getCurrentFrame() {
        return currentFrame;
    });
}
exports.init = init;
//# sourceMappingURL=iframes.js.map