/// <reference types="node" />
/// <reference types="@wdio/sync/webdriverio-core" />
import { BrowserObject } from '@wdio/sync';
export { getElementsMatching, ElementMatchingInput, VisibilityCheckConfig } from "./selectors";
export { checkIntoPage } from './iframes';
export { TestabilityOptions } from "./testability";
import { EventEmitter } from "events";
export { ShadowAcisConfig } from "./utils";
export declare enum TestEvents {
    TestStart = "TestStart",
    TestEnd = "TestEnd",
    SuiteStart = "SuiteStart",
    SuiteEnd = "SuiteEnd",
    StepStart = "StepStart",
    StepEnd = "StepEnd"
}
export declare const browserEvents: any;
export declare class ShadowDomService {
    acisBrowser: AcisBrowser;
    before(): void;
    /**
     * Use this method if you have and adhoc runner (!= wdio) and you
     * want to use Acis capabilities.
     * @param browser Initializes an Acis browser
     */
    initBrowser(browser?: BrowserObject, options?: {
        createOwnBrowser?: boolean;
    }): void;
    private createOwnBrowser;
    reset(): void;
    beforeTest(...args: any[]): void;
    afterTest(...args: any[]): void;
    beforeScenario(...args: any[]): void;
    afterScenario(...args: any[]): void;
    beforeSuite(...args: any[]): void;
    afterSuite(...args: any[]): void;
    beforeFeature(...args: any[]): void;
    afterFeature(...args: any[]): void;
    beforeStep(...args: any[]): void;
    afterStep(...args: any[]): void;
}
export { deep } from "./commands";
export interface PrivateAcisBrowser extends BrowserObject {
    findFrame(selectors: string[]): string[];
    getCurrentFrame(): string[];
    acis: boolean;
    events: EventEmitter;
    loadTestabilityAwaiter(): any;
}
export interface AcisBrowser extends Readonly<PrivateAcisBrowser> {
}
declare module '@wdio/sync' {
    interface Browser {
        /**
         * Searches in the document and piercing in all shadow roots for the given selector
         * @param selector a pure css selector
         */
        deep$$(selector: string | Function): ElementArray;
        /**
         * Searches in the document and piercing in all shadow roots for the given selector
         * @param selector a pure css selector
         */
        deep$(selector: string | Function): Element;
        /**
         * The old $$ prior to deep selector support
         * @param selector
         */
        old$$(selector: string | Function): ElementArray;
        /**
         * The old $ prior to deep selector support
         * @param selector
         */
        old$(selector: string | Function): Element;
        /**
         * Changes to native context if the application has a native part.
         */
        goNativeContext(): any;
        /**
         * Changes to the web context. To be used in Hybrid applications.
         */
        goWebContext(): any;
        /**
         * Indicates if the app has a native context.
         */
        isNativeApplication(): boolean;
        /**
         * Indicates if the app is running in a browser.
         */
        isWebApplication(): boolean;
        /**
         * Hight lights a location in the screen.
         * @param pos Position in terms of x, y cordinates
         */
        highlightLocation(pos: {
            x: number;
            y: number;
        }): any;
        /**
         * Sends the given keys to the browser. Text sent is considered to be secret.
         * Use this instead of sendKeys if you're going to send a password or similar
         * @param value Te keys to send
         */
        privateKeys(value: string | string[]): void;
        /**
         * Changes to the window identified by the parameters waiting for it to be present
         * @param urlOrTitle Url or title string or regexp
         * @param timeout Time to wait
         * @param interval Check interval for presence
         * @param msgError Message to be risen in case of error
         */
        switchWindowWait(urlOrTitle: RegExp | string, timeout?: number, interval?: number, msgError?: string): void;
        waitForApplicationToCompleteTasks(): void;
    }
    interface Element {
        /**
         * Waits for the element to stop moving and to be clickable.
         * @param options Options for the wait
         */
        waitForActionable(options?: WaitForOptions): void;
        /**
         * Checks if the element can be interacted (is not moving) at this
         * specific moment.
         * @param options
         */
        isActionable(options?: ActionableOptions): boolean;
        /**
         * Set a secret value un the element. Use this instead of setValue if you're sending
         * a password or similar
         * @param value
         */
        addPrivateValue(value: string | number | boolean | object | any[]): void;
    }
    interface ActionableOptions {
        notAnimating?: boolean;
    }
    interface Browser {
        safeMode(): SafeOptions;
        safeMode(options: SafeOptions): SafeOptions;
    }
}
export interface SafeOptions {
    notAnimating?: boolean;
    scrollIntoView?: boolean;
    retries?: number;
    waitForApplicationToCompleteTasks?: boolean;
    applyCompatibilityPatches?: boolean;
}
//# sourceMappingURL=index.d.ts.map