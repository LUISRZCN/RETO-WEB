export declare type VisibilityCheckConfig = VisibilityCheckType | VisibilityCheckOptions;
/**
 * Indicates how the framework should operate when checking
 * for selectors visibility for an specific pageObject or componentObject
 */
export declare enum VisibilityCheckType {
    /**
     * No visibility checks will be performed
     * in addition to the standard `isVisibile`check.
     */
    WebDriverIoIsVisible = "DisplayedInDOM",
    /**
     * The elements,that are placed inside the
     * ViewPort will be checked not to be covered by another element.
     * Note that this check, in shake of speed, is only performed
     * in the top-left, middle-middle, bottom-right spots of the
     * element.
     * Elements outside the viewport will only use the standard
     * `isDisplayed` check.
     */
    NotCoveredIfInsideViewport = "NotCoveredIfInsideViewport",
    /**
     * The elements will be checked to be inside the
     * ViewPort and not to be covered by another element.
     * Note that this check, in shake of speed, is only performed
     * in the top-left, middle-middle, bottom-right spots of the
     * element.
     * Element outside the viewport will be considered to be hidden.
     */
    NotCoveredAndInsideViewport = "NotCoveredAndInsideViewport",
    /**
     * If element is outside the ViewPort it will be scrolled into view
     * prior to the check.
     * The elements will be checked not to be covered by another element.
     * Note that this check, in shake of speed, is only performed
     * in the top-left, middle-middle, bottom-right spots of the
     * element.
     */
    NotCovered = "NotCovered"
}
export interface VisibilityCheckOptions {
    enabled?: boolean;
    autoScroll?: boolean;
    visibleOutsideViewport?: boolean;
}
export declare function getConfigFromVisibilityCheckType(type: VisibilityCheckConfig): VisibilityCheckOptions;
/**
 * check if element is not overlapped by another element or disabled
 * @param  {HTMLElement} elem  element to check
 * @param  {Options} options   Optional options, i.e  {"autoScroll": true, "visibleOutsideViewport": true}
 * @return {Boolean}           false if element is not overlapped
 */
export declare function isElementDisplayed(element: Element, options?: VisibilityCheckOptions): boolean;
//# sourceMappingURL=isElementDisplayed.d.ts.map