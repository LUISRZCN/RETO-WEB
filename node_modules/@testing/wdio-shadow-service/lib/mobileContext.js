"use strict";
exports.__esModule = true;
exports.init = void 0;
function init(browser) {
    var context;
    var runningOnBrowser = false;
    browser.addCommand('isNativeApplication', function () {
        return !runningOnBrowser;
    });
    browser.addCommand('isWebApplication', function () {
        return runningOnBrowser;
    });
    function saveRunningOnBrowserCall(f, def) {
        if (runningOnBrowser)
            return def;
        try {
            return f();
        }
        catch (_) {
            console.warn('Called context method, but looks we are on web environment.');
            runningOnBrowser = true;
        }
        return def;
    }
    try {
        browser.overwriteCommand('getContext', function (getContext) {
            if (!context) {
                context = saveRunningOnBrowserCall(getContext, '');
            }
            return context;
        });
        browser.overwriteCommand('switchContext', function (switchContext, newContext) {
            if (newContext !== context) {
                return saveRunningOnBrowserCall(function () {
                    switchContext(newContext);
                    context = newContext;
                });
            }
        });
        browser.overwriteCommand('getContexts', function (getContexts) {
            return saveRunningOnBrowserCall(getContexts, []);
        });
        browser.addCommand('goNativeContext', function () {
            if (browser.getContext() !== 'NATIVE_APP') {
                return browser.switchContext('NATIVE_APP');
            }
        });
        browser.addCommand('goWebContext', function () {
            var isWeb = function (ctx) { return ctx.startsWith('WEBVIEW_') || ctx.startsWith('CHROMIUM'); };
            if (!isWeb(browser.getContext())) {
                var views_1;
                browser.waitUntil(function () {
                    views_1 = browser.getContexts().filter(isWeb);
                    return views_1.length;
                }, {
                    timeout: 20000
                });
                if (views_1.length > 1) {
                    console.warn("Multiple webviews found " + views_1 + "... Will try with the first one.");
                }
                return browser.switchContext(views_1[0]);
            }
        });
        runningOnBrowser = !browser.isMobile;
    }
    catch (e) {
        runningOnBrowser = true;
    }
}
exports.init = init;
//# sourceMappingURL=mobileContext.js.map