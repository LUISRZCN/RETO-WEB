const { findProxy } = require('../../middleware/proxy');
const { getPlatform } = require('../../../src/drivers/common/');
const axios = require('axios');
const fs = require('fs');
const findChromeVersion = require('find-chrome-version');
const { HttpsProxyAgent } = require('https-proxy-agent');
const { join } = require('path');
const StreamZip = require('node-stream-zip');

installChromeDriver();

async function installChromeDriver() {
    try {
        const chromeVersion = process.env.CHROME_VERSION || await findChromeVersion();
        const { zipPath, zipDir } = getLocalPath();

        if (chromeVersion) {
            const driverVersion = getMinorVersion(chromeVersion);
            const apiUrl = getApiUrl(driverVersion);

            if (driverVersion && apiUrl) {
                process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

                const chromeDriverVersionUrl = await getChromeDriverVersions(apiUrl, driverVersion, getPlatform());

                console.log(`Google Chrome version detected: ${chromeVersion}`);
                console.log(`Proceeding to download Chromedriver from ${chromeDriverVersionUrl}`)

                const zipBinary = await downloadChromeDriver(chromeDriverVersionUrl);

                await prepareDriverDirectory(zipDir, driverVersion);
                await extractZipFile(zipBinary, zipPath, zipDir);
            }

            if (!!driverVersion && !apiUrl) {
                console.log(`Google Chrome version detected: ${chromeVersion}`);

                await prepareDriverDirectory(zipDir, chromeVersion);
            }
        }

        if (!chromeVersion) {
            console.log('No Google Chrome versions detected. Assuming that it\'s not needed');
        }
    } catch(e) {
        console.log(e);
    }
}

async function getChromeDriverVersions(url, minorVersion, platform) {
    try {
        const options = getHttpsAgentConfig(await findProxy());
        const response = await axios.get(url, options);
        const responseData = (response || {}).data;

        return !!responseData && getChromeDriverVersion(responseData, minorVersion, platform);
    } catch (error) {
        console.log(error);
    }
}

function getChromeDriverVersion(versions, minorVersion, platform) {
    const versionData = ((versions || {}).builds || {})[minorVersion];
    const chromeDriverUrls = ((versionData || {}).downloads || {}).chromedriver || [];

    if (chromeDriverUrls.length > 0) {
        const chromeDriverUrl = chromeDriverUrls.find((urlData) => urlData.platform === platform);

        if (!chromeDriverUrl) {
            console.log('It looks like a ChromeDriver version was not found for your platform');
        }

        return (chromeDriverUrl || {}).url;
    }

    console.log('It looks like something happened when trying to retrieve a ChromeDriver version');
}

async function downloadChromeDriver(url) {
    try {
        const options = { responseType: 'arraybuffer', ...getHttpsAgentConfig(await findProxy()) };
        const response = await axios.get(url, options);

        return (response || {}).data;
    } catch (error) {
        console.log(error);
    }
}

async function prepareDriverDirectory(zipDir, driverVersion) {
    await fs.rmSync(zipDir, { recursive: true, force: true });
    await fs.mkdirSync(zipDir);
    await fs.chmod(zipDir, '755', (error) => { error && console.log(error); });
    await fs.writeFileSync(join(zipDir, 'version.txt'), driverVersion);
}

async function extractZipFile(zipBinary, zipPath, zipDir) {
    await fs.writeFileSync(zipPath, zipBinary);

    const zip = new StreamZip.async({ file: zipPath });
    const entries = await zip.entries();

    for (const entry of Object.values(entries)) {

        const fileName = entry.name.split('/').pop();
        const url = join(zipDir, fileName);

        await zip.extract(entry.name, url);
        await fs.chmod(url, '755', (error) => { error && console.log(error); });
    }

    await fs.existsSync(zipPath) && await fs.unlinkSync(zipPath);
    await zip.close();
}

function getLocalPath() {    
    const zipDir = join(__dirname, '..', '..', '..', 'chromedriver');
    const zipPath = join(zipDir, 'chromedriver.zip');

    return { 
        zipPath,
        zipDir
    };
}

function getApiUrl(chromeVersion) {
    const BREAKING_VERSION = 115;

    if (getMajorVersion(chromeVersion) >= BREAKING_VERSION) {
        return 'https://googlechromelabs.github.io/chrome-for-testing/latest-patch-versions-per-build-with-downloads.json';
    }
}

function getMajorVersion(chromeVersion) {
    return parseInt(chromeVersion, 0);
}

function getMinorVersion(chromeVersion) {
    return chromeVersion.split('.').slice(0, -1).join('.');
}

function getHttpsAgentConfig(httpsProxy) {
    if (httpsProxy) {
        return {
            proxy: false,
            httpsAgent: getHttpsAgent(httpsProxy)
        };
    }

    return {};
}

function getHttpsAgent(httpsProxy) {
    if (httpsProxy) {
        return new HttpsProxyAgent(httpsProxy);
    }
}