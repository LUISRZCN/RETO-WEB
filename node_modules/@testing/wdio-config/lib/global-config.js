"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.buildConfigForEnv = void 0;
var uuid_1 = require("uuid");
var path_1 = require("path");
var wdio_vbank_service_1 = require("@testing/wdio-vbank-service");
var capabilities_detector_1 = require("./capabilities-detector");
var middleware_1 = require("./middleware");
var debug = process.env.DEBUG === "true";
var wdioNodeOpts = process.env.WDIO_NODE_OPTS ? process.env.WDIO_NODE_OPTS.split(',') : [];
var pkgWdio = require("webdriverio/package.json");
var wdioFullVersion = pkgWdio.version;
var wdioVersion = parseInt(pkgWdio.version.match(/(\d+)\./)[1]);
middleware_1.detectPlatformContext();
/**
 * @hidden
 * */
function buildConfigForEnv(userConfig, envCapabilities) {
    var willRetry = (userConfig.cucumberOpts && !!userConfig.cucumberOpts.retry) || !!process.argv.find(function (s) { return s.indexOf('cucumberOpts.retry') >= 0; });
    var sauceConnect = userConfig.sauceConnect;
    var grid = envCapabilities.grid, selenium = envCapabilities.selenium, seleniumStandalone = envCapabilities.seleniumStandalone, chromedriver = envCapabilities.chromedriver, typescript = envCapabilities.typescript;
    var _a = selenium || {}, skipSeleniumInstall = _a.skipSeleniumInstall, localChromeDriverPath = _a.localChromeDriverPath;
    capabilities_detector_1.setSauceLabsTunnelProxy(sauceConnect);
    if (!process.send) {
        process.env.NODE_ENV = 'e2e:test';
        var updateNotifier = require('update-notifier');
        var pkg = require(path_1.join(__dirname, '..', 'package.json'));
        var chalk = require('chalk');
        var distTag = pkg.version.indexOf('alpha') >= 0 ? 'alpha' : pkg.version.indexOf('beta') >= 0 ? 'beta' : 'latest';
        var notifier = updateNotifier({
            pkg: pkg,
            distTag: distTag,
            shouldNotifyInNpmScript: true,
            updateCheckInterval: 1
        });
        var message = 'Update available ' +
            chalk.dim('{currentVersion}') +
            chalk.reset(' â†’ ') +
            chalk.green('{latestVersion}') +
            ("\n        Please update all " + chalk.red('@testing/*') + " Acis dependencies\n        Run " + chalk.cyan('npm upgrade') + " from this folder" + (distTag === 'latest' ? '\nCheck https://bbva.info/3fTvjsG for details' : ''));
        notifier.notify({ message: message });
    }
    var seleniumDrivers = getDriversVersions(selenium.versions);
    var defaults = Object.assign(__assign(__assign({ runner: 'local', maxInstances: 1, execArgv: wdioNodeOpts.concat(debug ? ['--inspect-brk=127.0.0.1:5859'] : []), debug: debug, specs: [path_1.join(userConfig.acisOpts.featuresDir, '**/*.feature')], proxy: grid === null || grid === void 0 ? void 0 : grid.proxy, exclude: [], capabilities: [
            {
                browserName: 'chrome'
            },
        ], featureFlags: {
            specFiltering: true
        }, framework: 'cucumber', outputDir: 'results', logLevel: (process.env.ACIS_LOG_LEVEL || 'info'), bail: 0, waitforTimeout: 10000, 
        //Needed because SL may take up to 10 minutes a device request in queue
        connectionRetryTimeout: 650000, 
        //Needed just in case browser/device provisioning fails
        connectionRetryCount: 3, reporters: ['spec'], screenshotPath: './results/', cucumberOpts: {
            requireModule: typescript ? [
                'tsconfig-paths/register',
                function () {
                    require('ts-node').register({ files: true });
                },
            ] : [],
            backtrace: true,
            compiler: [],
            dryRun: false,
            failFast: false,
            format: ['pretty'],
            colors: true,
            snippets: true,
            source: true,
            profile: [],
            strict: false,
            tagExpression: '',
            timeout: 900000,
            ignoreUndefinedDefinitions: false,
            scenarioLevelReporter: willRetry
        }, timeouts: {
            XS: 500,
            S: 1500,
            M: 5000,
            L: 20000,
            XL: 60000
        } }, (wdioVersion === 6 && seleniumStandalone) && {
        automationProtocol: 'webdriver',
        path: "/wd/hub/"
    }), chromedriver && !grid && {
        port: 9515,
        path: '/'
    }), grid && (grid.galatea ? {
        protocol: 'https',
        hostname: "galatea.globaldevtools.bbva.com",
        port: 443,
        path: '/wd/hub',
        user: grid.user,
        key: grid.pass,
        timeouts: {
            XS: 3000,
            S: 8000,
            M: 12000,
            L: 40000,
            XL: 80000
        },
        galateaTunnel: grid.tunnel,
        galateaTunnelOpts: {
            server: 'https://galatea.globaldevtools.bbva.com/api/v0/tunnels',
            user: grid.user,
            key: grid.pass,
            logFile: "results/galatea-tunnel.log",
            proxy: grid === null || grid === void 0 ? void 0 : grid.proxy
        },
        headers: {
            "Authorization": 'Basic ' + Buffer.from(grid.user + ":" + grid.pass).toString("base64")
        },
        maxInstances: 5,
        capabilities: [
            {
                maxInstances: 5,
                browserName: 'chrome',
                "goog:chromeOptions": {
                    args: ['--disable-gpu', '--disable-dev-shm-usage', '--no-sandbox'],
                    useAutomationExtension: false,
                    w3c: false
                },
                platformName: 'linux'
            }
        ]
    } : __assign(__assign({ maxInstances: 5, region: 'eu' }, (wdioVersion === 5) && {
        sauceConnect: grid.tunnel,
        sauceConnectOpts: getSauceOptions(envCapabilities, sauceConnect)
    }), { user: grid.user, key: grid.pass, timeouts: {
            XS: 4000,
            S: 10000,
            M: 20000,
            L: 50000,
            XL: 90000
        }, wdioVersion: wdioVersion,
        wdioFullVersion: wdioFullVersion, capabilities: [
            {
                maxInstances: 5,
                browserName: 'chrome',
                "sauce:options": {
                    extendedDebugging: true
                },
                "goog:chromeOptions": {
                    "w3c": "true"
                }
            },
        ] })));
    var mandatory = __assign({ services: calculateServices(userConfig, envCapabilities), cucumberOpts: {
            require: [
                require.resolve("@testing/cucumber-runner/lib/com.bbva.arch.qe/framework/hooks"),
                './node_modules/@*/*/test_e2e/lib/**/*.component.js',
                './node_modules/@*/*/test_e2e/lib/**/*.co.js',
                './node_modules/*/test_e2e/lib/**/*.component.js',
                './node_modules/*/test_e2e/lib/**/*.co.js',
                './node_modules/@testing/*/lib/**/*.component.js',
                './node_modules/@testing/*/lib/**/*.co.js',
                './node_modules/@testing/*/lib/**/*.page.js',
                './node_modules/@testing/*/lib/**/*.po.js',
                './node_modules/@testing/*/lib/**/*.steps.js',
                './node_modules/@testing/*/lib/**/*.hooks.js',
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.component.js'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.co.js'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.page.js'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.po.js'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.steps.js'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.hooks.js'),
            ].concat(envCapabilities.typescript ? [
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.component.ts'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.co.ts'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.page.ts'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.po.ts'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.steps.ts'),
                path_1.join(userConfig.acisOpts.baseDir, '**', '*.hooks.ts'),
            ] : [])
        }, reporters: [['allure', {
                    outputDir: 'results',
                    disableWebdriverStepsReporting: true,
                    disableWebdriverScreenshotsReporting: true,
                    useCucumberStepReporter: !willRetry || undefined
                }]] }, (wdioVersion === 5 && seleniumStandalone) && {
        seleniumInstallArgs: { drivers: seleniumDrivers },
        seleniumArgs: {
            drivers: seleniumDrivers,
            javaArgs: localChromeDriverPath && getDriversLocalPath(localChromeDriverPath)
        },
        skipSeleniumInstall: skipSeleniumInstall
    });
    function calculateServices(userConfig, envCapabilities) {
        var hasBrowserProviderService = userConfig.services && userConfig.services.find(function (service) {
            return ['selenium-standalone', 'chromedriver'].indexOf(service) >= 0;
        });
        var services = [
            [require('@testing/wdio-shadow-service').ShadowDomService, {}],
            [require('@testing/wdio-evidences-service'), {}],
            [require('@testing/wdio-testmanager-service'), {}],
            [wdio_vbank_service_1.VBankLauncher, {}],
            [wdio_vbank_service_1.VBankService, {}],
        ];
        var add = function (list) { return services = services.concat(list); };
        var grid = envCapabilities.grid, selenium = envCapabilities.selenium, seleniumStandalone = envCapabilities.seleniumStandalone, chromedriver = envCapabilities.chromedriver;
        if (grid) {
            if (process.env.GALATEA) {
                add([
                    [require('@testing/galatea-client-js-launcher'), {}],
                    [require('@testing/galatea-app-repository-wdio-service'), {}]
                ]);
            }
            else {
                if (wdioVersion === 5) {
                    add([
                        'sauce',
                        [require("@testing/wdio-sauce-extend-service"), {}]
                    ]);
                }
                else {
                    add([['sauce', {
                                sauceConnect: sauceConnect,
                                sauceConnectOpts: getSauceOptions(envCapabilities, sauceConnect)
                            }]]);
                    add([[require("@testing/wdio-sauce-extend-service"), {}]]);
                }
            }
        }
        else if (seleniumStandalone && !hasBrowserProviderService) {
            var _a = selenium || {}, skipSeleniumInstall_1 = _a.skipSeleniumInstall, localChromeDriverPath_1 = _a.localChromeDriverPath;
            add([(wdioVersion === 5) ? 'selenium-standalone' : ['selenium-standalone', {
                        installArgs: { drivers: seleniumDrivers },
                        args: {
                            drivers: seleniumDrivers,
                            javaArgs: localChromeDriverPath_1 && getDriversLocalPath(localChromeDriverPath_1)
                        },
                        skipSeleniumInstall: skipSeleniumInstall_1
                    }]]);
        }
        else if (chromedriver && !hasBrowserProviderService) {
            add(['chromedriver']);
        }
        return services;
    }
    return {
        defaults: defaults,
        mandatory: mandatory
    };
}
exports.buildConfigForEnv = buildConfigForEnv;
function getSauceOptions(envCapabilities, sauceConnect) {
    var _a;
    var isProxy = !!((_a = envCapabilities.grid) === null || _a === void 0 ? void 0 : _a.proxy);
    var defaultOptions = {
        x: 'https://eu-central-1.saucelabs.com/rest/v1',
        tunnelIdentifier: uuid_1.v1()
    };
    if (isProxy && capabilities_detector_1.isSauceLabsTunnel(envCapabilities.grid, sauceConnect)) {
        return __assign(__assign({}, defaultOptions), { proxyTunnel: isProxy });
    }
    return defaultOptions;
}
function getDriversLocalPath(localChromeDriverPath) {
    return ["-Dwebdriver.chrome.driver=" + localChromeDriverPath];
}
function getDriversVersions(versions) {
    if (versions === void 0) { versions = {}; }
    var _versions = {};
    if (!!versions.chrome) {
        _versions.chrome = { version: versions.chrome };
    }
    if (!!versions.firefox) {
        _versions.firefox = { version: versions.firefox };
    }
    if (!!versions.edge) {
        _versions.edge = { version: versions.edge };
    }
    if (!!versions.safari) {
        _versions.safari = { version: versions.safari };
    }
    return _versions;
}
//# sourceMappingURL=global-config.js.map