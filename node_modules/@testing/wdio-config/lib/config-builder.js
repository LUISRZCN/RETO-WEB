"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.configBuildForEnv = exports.configBuild = void 0;
var global_config_1 = require("./global-config");
var lodash_1 = require("lodash");
var base_1 = require("@testing/base");
var capabilities_detector_1 = require("./capabilities-detector");
var fixes_1 = require("./fixes");
var logger = base_1.getLogger('framework.wdio-config.configBuild');
fixes_1.overrideWdioSettings();
/**
 * This method merges the settings provided from your tests' config with
 * the ones stablished by default in a way it enables to customize the different
 * modules that integrates Acis when it's needed.
 *
 * @param args configuration objects to be merged
 */
function configBuild() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return configBuildForEnv.apply(void 0, __spreadArrays([capabilities_detector_1.ENV_CAPABILITIES], args));
}
exports.configBuild = configBuild;
/**
 * @hidden
 */
function configBuildForEnv(envCapabilities) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var acisDefaults = {
        acisOpts: {
            baseDir: process.env.SKIP_TS ? './lib' : './src',
            featuresDir: './src',
            createOwnBrowser: false,
            deepSelectorsByDefault: true
        }
    };
    var userConfig = lodash_1.mergeWith.apply(void 0, __spreadArrays([acisDefaults], args, [mergeNoArrays]));
    var _a = global_config_1.buildConfigForEnv(userConfig, envCapabilities), mandatory = _a.mandatory, defaults = _a.defaults;
    var _userConfig = lodash_1.mergeWith({}, defaults, userConfig, mergeNoArrays);
    var config = lodash_1.mergeWith({}, mandatory, _userConfig, mergeWithArrays);
    var capabilityFilter = process.env.CAPABILITY_FILTER;
    config.capabilities = getCapabilitiesUpdated(capabilityFilter, config.capabilities, envCapabilities);
    logger.trace('Resulting config: ', config);
    return config;
}
exports.configBuildForEnv = configBuildForEnv;
function getCapabilitiesUpdated(capabilityFilter, capabilities, envCapabilities) {
    var _capabilities = capabilityFilter
        ? getCapabilitiesOnBrowserFilter(capabilityFilter, capabilities)
        : capabilities;
    return filterCapabilitiesByActiveServer(envCapabilities, _capabilities);
}
function getCapabilitiesOnBrowserFilter(capabilityFilter, capabilities) {
    if (Array.isArray(capabilities)) {
        var parts_1 = capabilityFilter.split('@');
        return capabilities.filter(function (capability) {
            var browserName = capability.browserName, platformName = capability.platformName;
            var isBrowser = matchBrowser(browserName, parts_1[0]);
            var isPlatform = matchBrowser(platformName, parts_1[1]);
            return isBrowser && isPlatform;
        });
    }
    console.error('Capability filtering is not enabled in Multicapabilities');
    return capabilities;
}
function filterCapabilitiesByActiveServer(envCapabilities, capabilities) {
    var chromedriver = envCapabilities.chromedriver, grid = envCapabilities.grid;
    return capabilities.filter(function (capability) {
        var browserName = capability.browserName;
        if (!!chromedriver && !grid) {
            return browserName === 'chrome';
        }
        return true;
    });
}
function matchBrowser(capability, activeCapability) {
    if (capability === void 0) { capability = ''; }
    if (activeCapability === void 0) { activeCapability = ''; }
    return (!capability && !activeCapability) ||
        capability.toLowerCase() === activeCapability.toLowerCase();
}
function mergeWithArrays(objValue, srcValue) {
    if (Array.isArray(objValue)) {
        return objValue.concat(srcValue);
    }
}
function mergeNoArrays(objValue, srcValue) {
    if (Array.isArray(objValue)) {
        return srcValue;
    }
}
//# sourceMappingURL=config-builder.js.map