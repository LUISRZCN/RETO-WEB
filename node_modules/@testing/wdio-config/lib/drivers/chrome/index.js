"use strict";
exports.__esModule = true;
exports.chrome = void 0;
var find_chrome_driver_version_1 = require("find-chrome-driver-version");
var loading_1 = require("../../loading");
var fs = require('fs');
var join = require('path').join;
exports.chrome = {
    getDriverLocalPath: getDriverLocalPath,
    getVersionToDownload: getVersionToDownload,
    shouldUseDriver: shouldUseDriver,
    shouldUseLocalDriver: shouldUseLocalDriver
};
function getDriverLocalPath() {
    var _a = getLocalPath(), driverPath = _a.driverPath, versionPath = _a.versionPath;
    var driverVersion = fs.readFileSync(versionPath, { encoding: 'utf8', flag: 'r' });
    if (isBreakingVersion(driverVersion) && fs.existsSync(driverPath)) {
        return driverPath;
    }
}
function shouldUseLocalDriver() {
    return !!getDriverLocalPath();
}
function getVersionToDownload(logger) {
    if (!shouldUseLocalDriver()) {
        var driverVersion = process.env.CHROME_VERSION || findVersion(logger);
        if (!isBreakingVersion(driverVersion)) {
            return driverVersion;
        }
    }
}
function shouldUseDriver(isSeleniumStandalone, logger) {
    if (loading_1.areAllModulesAvailable(['wdio-chromedriver-service'], logger) && shouldUseLocalDriver()) {
        var LAUNCH_CHROMEDRIVER = process.env.LAUNCH_CHROMEDRIVER;
        return isSeleniumStandalone ? LAUNCH_CHROMEDRIVER === 'true' : true;
    }
    return false;
}
function findVersion(logger) {
    var MS_CACHE_EXPIRATION_TIME = 120 * 1000;
    try {
        return find_chrome_driver_version_1.findChromeDriverVersionSyncCachedFallback(MS_CACHE_EXPIRATION_TIME);
    }
    catch (e) {
        logger.info('No local chrome could be detected.', e);
    }
}
function getLocalPath() {
    var iswindows = process.platform === 'win32';
    var driverDir = join(__dirname, '..', '..', '..', 'chromedriver');
    var driverName = iswindows ? 'chromedriver.exe' : 'chromedriver';
    var driverPath = join(driverDir, driverName);
    var versionPath = join(driverDir, 'version.txt');
    return {
        driverPath: driverPath,
        versionPath: versionPath
    };
}
function isBreakingVersion(driverVersion) {
    var BREAKING_VERSION = 115;
    return parseInt(driverVersion, 0) >= BREAKING_VERSION;
}
//# sourceMappingURL=index.js.map