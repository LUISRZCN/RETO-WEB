"use strict";
exports.__esModule = true;
exports.isSauceLabsTunnel = exports.setSauceLabsTunnelProxy = exports.ENV_CAPABILITIES = void 0;
var base_1 = require("@testing/base");
var chrome_1 = require("./drivers/chrome");
var firefox_1 = require("./drivers/firefox");
var loading_1 = require("./loading");
var _a = process.env, SAUCE_ACCESS_USR = _a.SAUCE_ACCESS_USR, SL_USER = _a.SL_USER, GRID_USER = _a.GRID_USER, SAUCE_ACCESS_KEY = _a.SAUCE_ACCESS_KEY, SL_PWD = _a.SL_PWD, GRID_PASS = _a.GRID_PASS, BUILD_ID = _a.BUILD_ID, EDGE_VERSION = _a.EDGE_VERSION, SAFARI_VERSION = _a.SAFARI_VERSION, GALATEA = _a.GALATEA, GRID_TUNNEL = _a.GRID_TUNNEL, SKIP_TS = _a.SKIP_TS, HTTP_PROXY = _a.HTTP_PROXY, http_proxy = _a.http_proxy, npm_config_proxy = _a.npm_config_proxy;
var _GRID_USER = SAUCE_ACCESS_USR || SL_USER || GRID_USER;
var _GRID_PASS = SAUCE_ACCESS_KEY || SL_PWD || GRID_PASS;
if (_GRID_USER) {
    process.env.GRID_USER = _GRID_USER;
    process.env.GRID_PASS = _GRID_PASS;
}
var logger = base_1.getLogger('framework.config');
var ci = !!BUILD_ID;
var proxy = HTTP_PROXY || http_proxy || npm_config_proxy;
if (ci && (!_GRID_USER || !_GRID_PASS)) {
    var message = "CI build detected, but remote browser credentials are not set.";
    logger.info(message);
}
var SKIP_SELENIUM_INSTALL = process.env.SKIP_SELENIUM_INSTALL === 'true';
var isRemoteGrid = !!_GRID_USER && !!_GRID_PASS;
var isSelenium = !isRemoteGrid && isSeleniumStandalone();
var chromedriver = !isRemoteGrid && chrome_1.chrome.shouldUseDriver(isSelenium, logger);
var seleniumStandalone = isSelenium && !chromedriver && !isRemoteGrid;
/**
 * @hidden
 */
exports.ENV_CAPABILITIES = {
    typescript: isTypeScript(),
    selenium: !!seleniumStandalone && {
        localChromeDriverPath: chrome_1.chrome.getDriverLocalPath(),
        skipSeleniumInstall: SKIP_SELENIUM_INSTALL,
        versions: {
            chrome: chrome_1.chrome.getVersionToDownload(logger),
            firefox: firefox_1.firefox.getVersionToDownload(),
            edge: EDGE_VERSION,
            safari: SAFARI_VERSION
        }
    },
    seleniumStandalone: seleniumStandalone,
    chromedriver: chromedriver,
    grid: !!isRemoteGrid && {
        user: _GRID_USER,
        pass: _GRID_PASS,
        galatea: GALATEA === 'true',
        tunnel: GRID_TUNNEL === 'true',
        proxy: proxy
    },
    ci: ci
};
function isSeleniumStandalone() {
    return loading_1.areAllModulesAvailable(['@wdio/selenium-standalone-service'], logger);
}
function setSauceLabsTunnelProxy(sauceConnect) {
    if (proxy && isSauceLabsTunnel(exports.ENV_CAPABILITIES.grid, sauceConnect)) {
        process.env.SAUCE_PROXY = getProtocolRemoved(proxy);
        process.env.SAUCE_PROXY_TUNNEL = 'true';
        console.log(process.env.SAUCE_PROXY);
    }
}
exports.setSauceLabsTunnelProxy = setSauceLabsTunnelProxy;
function isSauceLabsTunnel(grid, sauceConnect) {
    var _a = grid || {}, tunnel = _a.tunnel, user = _a.user, galatea = _a.galatea;
    var isTunnel = tunnel || sauceConnect;
    var isUser = !!user;
    var isSauceLabs = galatea !== true;
    return isSauceLabs && isUser && isTunnel;
}
exports.isSauceLabsTunnel = isSauceLabsTunnel;
function isTypeScript() {
    var tsModules = ['ts-node', 'typescript', 'tsconfig-paths'];
    var message = 'Typescript not enabled.';
    return loading_1.areAllModulesAvailable(tsModules, logger, message) && !SKIP_TS;
}
function getProtocolRemoved(proxy) {
    var protocol = '://';
    if (proxy.includes(protocol)) {
        var proxyMapped = proxy.split(protocol)[1] || '';
        return proxyMapped.trim();
    }
    return proxy;
}
//# sourceMappingURL=capabilities-detector.js.map