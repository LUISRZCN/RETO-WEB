"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.setupCertificates = void 0;
var fs = require('fs');
var https = require('https');
var join = require('path').join;
function setupCertificates() {
    return __awaiter(this, void 0, void 0, function () {
        var NODE_EXTRA_CA_CERTS, isCert, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    NODE_EXTRA_CA_CERTS = process.env.NODE_EXTRA_CA_CERTS;
                    _a = NODE_EXTRA_CA_CERTS;
                    if (!_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, fs.existsSync(NODE_EXTRA_CA_CERTS)];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    isCert = _a;
                    if (!!isCert) return [3 /*break*/, 4];
                    return [4 /*yield*/, generateCerts(getCertsPath())];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.setupCertificates = setupCertificates;
function generateCerts(certFile) {
    return __awaiter(this, void 0, void 0, function () {
        var dir, options;
        return __generator(this, function (_a) {
            dir = join(certFile, '..');
            options = {
                host: 'google.com',
                port: 443,
                method: 'GET',
                rejectUnauthorized: false
            };
            return [2 /*return*/, new Promise(function (resolve) {
                    var request = https.request(options, function (res) {
                        return __awaiter(this, void 0, void 0, function () {
                            var cert, list, certData;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        cert = res.socket.getPeerCertificate(true);
                                        list = new Set();
                                        certData = '';
                                        do {
                                            list.add(cert);
                                            certData += '-----BEGIN CERTIFICATE-----\n';
                                            certData += cert.raw.toString('base64');
                                            certData += '\n-----END CERTIFICATE-----\n';
                                            cert = cert.issuerCertificate;
                                        } while (cert && typeof cert === 'object' && !list.has(cert));
                                        return [4 /*yield*/, generateCert(dir, certFile, certData)];
                                    case 1:
                                        _a.sent();
                                        process.env.NODE_EXTRA_CA_CERTS = certFile;
                                        resolve(true);
                                        return [2 /*return*/];
                                }
                            });
                        });
                    });
                    request.on('error', function (error) {
                        resolve(null);
                    });
                    request.end();
                })];
        });
    });
}
function generateCert(dir, certFile, certData) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, fs.existsSync(dir)];
                case 1:
                    _a = !!(_b.sent());
                    if (!_a) return [3 /*break*/, 3];
                    return [4 /*yield*/, fs.rmSync(dir, { recursive: true, force: true })];
                case 2:
                    _a = (_b.sent());
                    _b.label = 3;
                case 3:
                    _a;
                    return [4 /*yield*/, fs.mkdirSync(dir)];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, fs.chmod(dir, '755', function (error) { error && console.log(error); })];
                case 5:
                    _b.sent();
                    return [4 /*yield*/, fs.writeFileSync(certFile, certData)];
                case 6:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function getCertsPath() {
    var dir = join(__dirname, '..', '..', 'certs');
    var certFile = join(dir, 'bbva.crt');
    return certFile;
}
//# sourceMappingURL=certs.js.map