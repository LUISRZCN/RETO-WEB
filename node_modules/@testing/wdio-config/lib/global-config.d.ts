import { Config as WdioConfig } from "@wdio/sync";
import { CucumberOpts } from "@wdio/cucumber-framework";
import { SafeOptions, TestabilityOptions } from "@testing/wdio-shadow-service";
import { VBankConfig } from "@testing/wdio-vbank-service";
import { ShadowAcisConfig } from "@testing/wdio-shadow-service";
import { EnvironmentCapabilities } from "./capabilities-detector";
/**
 * Configuration interface for WDIO with ACIS projects
 */
export interface Config extends WdioConfig {
    /**
     * It configures Acis specific options in order to stablish:
     *
     * - Where features and page objects files can be found in the application.
     * - If Acis is allowed to use its own browser's instance with Acis-specific capabilities.
     * - If Shadow DOM selectors should be referenced as standard DOM selectors when interacting with them.
     * - Which safeMode settings should be active by default when interacting with DOM elements during an e2e testing process with Acis.
     */
    acisOpts?: {
        /**
         * It sets the base directory to use for your source files
         * (pages, components, steps). By default it'll be './src', or './lib' if you set
         * `SKIP_TS` environment variable.
         *
         * Default: *./src*
         */
        baseDir?: string;
        /**
         * Directory where the Cucumber's feature files can be found.
         *
         * Default: *./src*
         */
        featuresDir?: string;
        /**
         * It makes Acis create its own browser instance that'll be set as global browser
         * only when running within Acis steps, componentObjects and pageObjects methods.
         * It'll be restored afterwards.
         *
         * Note this is only supported for web browsers and not native applications.
         *
         * Default: *false*
         */
        createOwnBrowser?: boolean;
        /**
         * It sets the list of checks to be considered when interaction with DOM elements occurs
         * during the e2e testing process.
         *
         * For more info, you may want to check
         * **[Safe Mode](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/e2e-js-framework/browse/packages/wdio-shadow-service/docs/safe-mode.md)** documentation.
         *
         * Default:
         *
         *   ```typescript
         *       {
         *           retries: 1,
         *           notAnimating: true,
         *           scrollIntoView: true,
         *           waitForApplicationToCompleteTasks: true,
         *       }
         *   ```
         */
        safeMode?: SafeOptions;
        /**
         * Configuration settings by default when the safeMode's *waitForApplicationToCompleteTasks*
         * is truthy.
         *
         * For more info, you may want to check Safe Mode's **[waitForApplicationToCompleteTasks
         * command](https://globaldevtools.bbva.com/bitbucket/projects/BGT/repos/e2e-js-framework/browse/packages/wdio-shadow-service/docs/safe-mode.md#waitforapplicationtocompletetasks)**
         * documentation.
         *
         * Default: *null*
         */
        testabilityOpts?: TestabilityOptions;
    } & ShadowAcisConfig;
    /**
     * Path where screenshots taken during the e2e testing process are saved
     */
    screenshotPath?: string;
    /**
     * It enables debug when truthy
     */
    debug?: boolean;
    /**
     * It handles the configuration for the CucumberJs runner.
     * See also [the official documentation](https://github.com/webdriverio/webdriverio/tree/main/packages/wdio-cucumber-framework#cucumberopts-options).
     */
    cucumberOpts?: CucumberOpts;
    /**
     * VBank configuration
     */
    vbank?: VBankConfig;
    /**
     * Timeouts to be used during the e2e testing process.
     *
     * This timeouts might change depending on the device provider (i.e. Sauce Labs) so that
     * your tests can handle different browser speeds. Use XS for small waits (~ a second) and
     * XL for long ones (~ a minute)
     */
    timeouts?: {
        XS: number;
        S: number;
        M: number;
        L: number;
        XL: number;
    };
    /**
     * @hidden
     */
    wdioVersion?: number;
    /**
     * @hidden
     */
    wdioFullVersion?: string;
}
/**
 * @hidden
 * */
export declare function buildConfigForEnv(userConfig: Config, envCapabilities: EnvironmentCapabilities): {
    defaults: {
        port: number;
        path: string;
        automationProtocol: string;
        runner: string;
        maxInstances: number;
        execArgv: string[];
        debug: boolean;
        specs: string[];
        proxy: string;
        exclude: any[];
        capabilities: {
            browserName: string;
        }[];
        featureFlags: {
            specFiltering: boolean;
        };
        framework: string;
        outputDir: string;
        logLevel: any;
        bail: number;
        waitforTimeout: number;
        connectionRetryTimeout: number;
        connectionRetryCount: number;
        reporters: string[];
        screenshotPath: string;
        cucumberOpts: {
            requireModule: (string | (() => void))[];
            backtrace: boolean;
            compiler: any[];
            dryRun: boolean;
            failFast: boolean;
            format: string[];
            colors: boolean;
            snippets: boolean;
            source: boolean;
            profile: any[];
            strict: boolean;
            tagExpression: string;
            timeout: number;
            ignoreUndefinedDefinitions: boolean;
            scenarioLevelReporter: boolean;
        };
        timeouts: {
            XS: number;
            S: number;
            M: number;
            L: number;
            XL: number;
        };
    } & {
        protocol: string;
        hostname: string;
        port: number;
        path: string;
        user: string;
        key: string;
        timeouts: {
            XS: number;
            S: number;
            M: number;
            L: number;
            XL: number;
        };
        galateaTunnel: boolean;
        galateaTunnelOpts: {
            server: string;
            user: string;
            key: string;
            logFile: string;
            proxy: string;
        };
        headers: {
            Authorization: string;
        };
        maxInstances: number;
        capabilities: {
            maxInstances: number;
            browserName: string;
            "goog:chromeOptions": {
                args: string[];
                useAutomationExtension: boolean;
                w3c: boolean;
            };
            platformName: string;
        }[];
    };
    mandatory: {
        seleniumInstallArgs: {
            drivers: any;
        };
        seleniumArgs: {
            drivers: any;
            javaArgs: string[];
        };
        skipSeleniumInstall: boolean;
        services: any[][];
        cucumberOpts: {
            require: string[];
        };
        reporters: (string | {
            outputDir: string;
            disableWebdriverStepsReporting: boolean;
            disableWebdriverScreenshotsReporting: boolean;
            useCucumberStepReporter: true;
        })[][];
    };
};
//# sourceMappingURL=global-config.d.ts.map