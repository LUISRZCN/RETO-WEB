"use strict";
const allure_reporter_1 = require("@wdio/allure-reporter");
const os_1 = require("os");
const version = require('../package.json').version;
let first = true;
module.exports = class EvidencesService {
    constructor() {
        this.output = { stdout: '', stderr: '' };
        this.count = 1;
        this.originalStreams = {
            stdout: process.stdout.write.bind(process.stdout),
            stderr: process.stderr.write.bind(process.stderr)
        };
    }
    onPrepare(_config, capabilities) {
        const caps = Array.isArray(capabilities) ? capabilities : Object.values(capabilities);
        caps.forEach(capability => {
            if (capability.browserName !== 'internet explorer') {
                capability['acis:options'] = {
                    version,
                    hostname: os_1.hostname(),
                    user: os_1.userInfo().username,
                    platform: os_1.platform(),
                    cwd: process.cwd(),
                    nodeVersion: process.version,
                };
            }
            capability['sauce:options'] = capability['sauce:options'] || {};
        });
    }
    afterScenario(_uri, _feature, _scenario, result, _sourceLocation) {
        this.stopStreams();
        if (result.status === 'error' || result.status === 'failed') {
            this.captureInfo();
        }
    }
    afterTest(_test, _context, { error, _result, _duration, _passed, _retries }) {
        this.stopStreams();
        if (error) {
            this.captureInfo();
        }
    }
    beforeTest() {
        this.captureSteams();
        if (!first) {
            browser.reloadSession();
        }
        first = false;
    }
    beforeScenario(uri, { document: { feature } }, scenario, sourceLocation) {
        this.captureSteams();
        let testId = '' + this.count++;
        if (!(feature.tags && feature.tags.map(t => t.name).find(t => t === '@single-browser'))) {
            if (!first) {
                browser.reloadSession();
            }
            testId = browser.sessionId;
        }
        try {
            browser.execute(`sauce:context=${browser.sessionId}##${testId}`);
        }
        catch (e) {
            //Only understood by saucelabs... ignore the errors in the rest.
        }
        first = false;
        const caps = browser.capabilities;
        allure_reporter_1.default.addEnvironment('_session', JSON.stringify({
            sessionId: browser.sessionId,
            testId,
            tags: scenario.tags.map(tag => tag.name),
            scenario: `${uri}:${sourceLocation.line}`
        }));
        allure_reporter_1.default.addEnvironment('_capabilities', JSON.stringify(Object.assign(Object.assign({}, caps), { provider: process.env.ACIS_BROWSER_PROVIDER })));
    }
    captureInfo() {
        try {
            try {
                if (browser.getContexts() && browser.getContexts().length) {
                    browser.getContexts().forEach(context => {
                        browser.switchContext(context);
                        const source = browser.getPageSource();
                        allure_reporter_1.default.addAttachment("App Source " + context, source, context.startsWith('WEBVIEW_') ? "text/html" : "text/xml");
                    });
                    return;
                }
            }
            catch (_) {
            }
            try {
                if (browser.getLogTypes) {
                    browser.getLogTypes().forEach(type => {
                        try {
                            allure_reporter_1.default.addAttachment("log:" + type, browser.getLogs(type), "application/json");
                        }
                        catch (error) { }
                    });
                }
                else {
                    allure_reporter_1.default.addAttachment("log:browser", browser.getLogs("browser"), "application/json");
                }
            }
            catch (_) { }
            allure_reporter_1.default.addAttachment("Page HTML", browser.getPageSource(), "text/html");
            allure_reporter_1.default.addAttachment("Failure screenshot", Buffer.from(browser.takeScreenshot(), 'base64'), "image/png");
        }
        catch (error) {
            console.error(error);
        }
        browser.call(() => new Promise(res => setTimeout(res, parseInt(process.env.ACIS_ERROR_PAUSE) || 0)));
    }
    captureSteams() {
        const streamer = (type) => (line, encoding, callback) => {
            this.output[type] += line.toString(callback && encoding);
            return this.originalStreams[type](line, encoding, callback);
        };
        process.stdout.write = streamer('stdout');
        process.stderr.write = streamer('stderr');
    }
    stopStreams() {
        process.stdout.write = this.originalStreams.stdout;
        process.stderr.write = this.originalStreams.stderr;
        allure_reporter_1.default.addAttachment("Process output", this.output, 'application/json');
        this.output = { stdout: '', stderr: '' };
    }
};
//# sourceMappingURL=index.js.map