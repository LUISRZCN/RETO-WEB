/**
 * Page registry based in decorators which allows us to easily link a Page Object with
 * its corresponding page or view in the application's flow to be tested.
 *
 * -----------------------
 *
 * @module PageContext
 */
import '@testing/wdio-shadow-service';
import * as UrlPattern from 'url-pattern';
import { Page, PageContextMetadata } from './page';
declare type Constructor<T> = new (...args: any[]) => T;
/**
 * Decorator to be used with [PageObjects](PageObject.md) so metadata about
 * the page context can be provided. Check the PageContextMetadata properties for details.
 *
 * Example:
 *
 * ```typescript
 *   @PageContext({
 *    path: '/',
 *    selector: `/deep/ shop-app[page=home]`,
 *   })
 *   export class WelcomePage extends PageObject {}
 * ```
 *
 * @param ctx
 */
export declare function PageContext(ctx: PageContextMetadata): <T extends Constructor<Page>>(target: T) => {
    new (...args: any[]): {
        goRoute: string | UrlPattern;
        route: UrlPattern;
        readonly context: (import("../containers/containerContext").SelectedContainerContext & Readonly<import("./page").InternalPageContext & import("../containers/containerContext").SelectedContainerContext>) | (import("../containers/containerContext").SelectedContainerContext & Readonly<import("./page").InternalPageContext & import("../containers/containerContext").WrappedContainerContext>) | (import("../containers/containerContext").WrappedContainerContext & Readonly<import("./page").InternalPageContext & import("../containers/containerContext").SelectedContainerContext>) | (import("../containers/containerContext").WrappedContainerContext & Readonly<import("./page").InternalPageContext & import("../containers/containerContext").WrappedContainerContext>);
        readonly type: string;
        __filename: string;
        readonly wrapper: Readonly<import("@wdio/sync").Element>;
        readonly timeout: number;
        isDisplayed: (() => boolean) & (() => boolean);
        getDebugInformation(): string;
        isCurrent(): boolean;
        go(values?: {
            [key: string]: string;
        }): void;
        getSlot(): Readonly<import("@wdio/sync").Element>;
    };
} & T;
export {};
//# sourceMappingURL=pageContext.d.ts.map