"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericProvider = void 0;
const events_1 = require("events");
const wdio_shadow_service_1 = require("@testing/wdio-shadow-service");
class GenericProvider {
    constructor() {
        this.reset = () => {
            if (this._events) {
                this._events.removeAllListeners();
            }
        };
    }
    /**
     * This property provides a way to listen to life cycle events of the loading process of elements
     * returned by this provider. Use it to apply for example while making "while loading" validations
     * or for debugging.
     *
     * Note events will be reset after each test session.
     *
     */
    get events() {
        if (!this._events) {
            this._events = new events_1.EventEmitter();
        }
        if (browser.sessionId !== this.activeSession) {
            this.reset();
            this.activeSession = browser.sessionId;
            const acisBrowser = browser;
            if (acisBrowser.events) {
                acisBrowser.events.removeListener(wdio_shadow_service_1.TestEvents.StepEnd, this.reset);
                acisBrowser.events.removeListener(wdio_shadow_service_1.TestEvents.TestEnd, this.reset);
                acisBrowser.events.on(wdio_shadow_service_1.TestEvents.StepEnd, this.reset);
                acisBrowser.events.on(wdio_shadow_service_1.TestEvents.TestEnd, this.reset);
            }
        }
        return this._events;
    }
}
exports.GenericProvider = GenericProvider;
//# sourceMappingURL=provider.js.map