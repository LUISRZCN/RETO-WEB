/**
 * @hidden
 */
export declare type Call<T> = () => T;
/**
 * @hidden
 */
export declare type AsyncCall<T> = () => Promise<T>;
/**
 * Executes an async operation inside the wdio sync context
 *
 * This is an equivalent of invoking `browser.call`on a `Promise.all` with the function.
 * @param f A function to execute
 */
export declare function doAsync<T>(f: AsyncCall<T>): T;
/**
 * Executes async operations inside the wdio sync context
 *
 * This is an equivalent of invoking `browser.call`on a `Promise.all` with each function call.
 * @param f A list of functions to execute
 */
export declare function doAsync<T>(f: AsyncCall<T>[]): T[];
/**
 * Executes browser synchronous function (written with @wdio/sync) inside an
 * asynchronous context. Note functions are executed in parallel.
 * @param f A function to execute
 */
export declare function doSync<T>(f: Call<T>): Promise<T>;
/**
 * Executes browser synchronous functions (written with @wdio/sync) inside an
 * asynchronous context. Note functions are executed in parallel.
 * @param f A list of functions to execute
 */
export declare function doSync<T>(f: Call<T>[]): Promise<T[]>;
/**
 * Executes the given synchronous functions (written with @wdio/sync) in parallel
 * from withing and @wdio/sync context.
 * @param f
 */
export declare function parallel<T>(...f: Call<T>[]): T[];
//# sourceMappingURL=async-sync.d.ts.map