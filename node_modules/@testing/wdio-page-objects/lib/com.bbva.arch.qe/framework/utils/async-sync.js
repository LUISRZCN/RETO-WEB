"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parallel = exports.doSync = exports.doAsync = void 0;
const Fiber = require("fibers");
const { runSync } = require('@wdio/sync');
const base_1 = require("@testing/base");
const logger = base_1.getLogger("acis");
function doAsync(f) {
    const one = !Array.isArray(f);
    const functions = (one ? [f] : f);
    return browser.call(() => __awaiter(this, void 0, void 0, function* () {
        const rejections = [];
        const result = yield Promise.all(functions.map(func => func().catch(e => rejections.push(e))));
        if (rejections.length) {
            if (rejections.length > 1) {
                logger.error("multiple errors found in doAsync execution", rejections);
            }
            throw rejections[0];
        }
        const items = result;
        return one ? items.pop() : items;
    }));
}
exports.doAsync = doAsync;
function doSync(f) {
    return __awaiter(this, void 0, void 0, function* () {
        const one = !Array.isArray(f);
        const functions = (one ? [f] : f);
        const rejections = [];
        const result = yield Promise.all(functions.map(func => new Promise(runSync(func))
            .catch(e => rejections.push(e))));
        if (rejections.length) {
            if (rejections.length > 1) {
                logger.error("multiple errors found in doSync execution", rejections);
            }
            throw rejections[0];
        }
        const items = result;
        return one ? items.pop() : items;
    });
}
exports.doSync = doSync;
/**
 * Executes the given synchronous functions (written with @wdio/sync) in parallel
 * from withing and @wdio/sync context.
 * @param f
 */
function parallel(...f) {
    if (!f.length) {
        return [];
    }
    if (f.length === 1) {
        return [f[0]()];
    }
    const fiber = Fiber.current;
    if ("internet explorer" === browser.capabilities.browserName) {
        return f.map(f => f());
    }
    else {
        return doAsync(() => doSync(f.map(f => () => {
            Object.keys(fiber).forEach(p => {
                Fiber.current[p] = fiber[p];
            });
            return f();
        })));
    }
}
exports.parallel = parallel;
//# sourceMappingURL=async-sync.js.map