import '@testing/wdio-shadow-service';
import { ContainerObject } from './container';
import { VisibilityCheckConfig } from '@testing/wdio-shadow-service';
/**
 * @hidden
 */
export declare type ContextTypes = "web" | "mobile-ios" | "mobile-android";
interface BaseContainerContext {
    /**
     * The element will not be considered current until this selectors disappear
     */
    loadingIndicatorSelectors?: string[];
    /**
     * Indicates the context of the page. By default it's value is web.
     * @default "web"
     */
    context?: ContextTypes;
    /**
     * This setting indicates to Acis the mechanism to use to check
     * component visibility.
     */
    visibilityCheckConfig?: VisibilityCheckConfig;
}
/**
 * @internal
 */
export interface WrappedContainerContext extends BaseContainerContext {
    /**
     * Indicates a wrapper element for the whole element. If provided, the methods
     * will be sandboxed so that calls to `$` or `$$` would be restricted to child
     * of the wrapper selector.
     *
     * If provided then selector property is optional
     */
    wrapper: string;
    /**
     * Element would considered to be current only if all of the provided selectors
     * (one or many) are displayed in the browser.
     *
     * This property is mandatory if no wrapper is provided.
     */
    selector?: string | string[];
}
/**
 * @internal
 */
export interface SelectedContainerContext extends BaseContainerContext {
    /**
     * Indicates a wrapper element for the whole element. If provided, the methods
     * will be sandboxed so that calls to `$` or `$$` would be restricted to child
     * of the wrapper selector.
     *
     * If provided then selector property is optional
     */
    wrapper?: string;
    /**
     * Element would considered to be current only if all of the provided selectors
     * (one or many) are displayed in the browser.
     *
     * This property is mandatory if no wrapper is provided.
     */
    selector: string | string[];
}
/**
 *
 * Decorator to be used with [ContainerObjects](./containers_ContainerObject.md)
 * through which metadata is provided in order to indetify the Object by linking it
 * to an existing DOM element
 *
 * -----------------------
 */
export declare type ContainerContextMetadata = SelectedContainerContext | WrappedContainerContext;
declare type Constructor<T> = new (...args: any[]) => T;
/**
 * @hidden
 */
export declare function InternalComponentContext(ctx: ContainerContextMetadata, register?: boolean): <T extends Constructor<ContainerObject>>(target: T) => {
    new (...args: any[]): {
        context: ContainerContextMetadata;
        type: string;
        __filename: string;
        readonly wrapper: Readonly<import("@wdio/sync").Element>;
        readonly timeout: number;
        isDisplayed(): boolean;
    };
} & T;
/**
 *
 * Decorator to be used with [ContainerObjects](./containers_ContainerObject.md)
 * through which metadata is provided in order to indetify the Object by linking it
 * to an existing DOM element
 *
 * -----------------------
 *
 * @hidden
 */
export declare function ContainerContext(ctx: ContainerContextMetadata): <T extends Constructor<ContainerObject>>(target: T) => {
    new (...args: any[]): {
        context: ContainerContextMetadata;
        type: string;
        __filename: string;
        readonly wrapper: Readonly<import("@wdio/sync").Element>;
        readonly timeout: number;
        isDisplayed(): boolean;
    };
} & T;
export {};
//# sourceMappingURL=containerContext.d.ts.map