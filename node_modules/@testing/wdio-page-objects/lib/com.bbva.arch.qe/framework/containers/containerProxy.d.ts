import { ContainerObject } from "./container";
import { AbstractProxy } from "../utils/proxy";
/**
 * @hidden
 */
export declare function getCurrentContainer(): any;
/**
 * @hidden
 */
export interface ProxifiedContainer {
    __framePath: string[];
}
/**
 * @hidden
 */
export declare function runInFrame<T>(container: ContainerObject, f: () => T): T;
/**
 * @hidden
 */
export declare function runInContext<T>(container: ContainerObject, targetMethod: () => T): T;
/**
 * @hidden
 */
export declare class ContainerProxyHandler<T extends ContainerObject> extends AbstractProxy<T> {
    private container;
    constructor(container: ContainerObject & ProxifiedContainer);
    protected rewrite(targetMethod: any): (...args: any[]) => any;
}
/** If element is undefined it will look for it dynamically when wrapped
 * @hidden
 */
export declare function proxifyContainerObject<T extends ContainerObject>(target: T, element?: WebdriverIO.Element, framePath?: string[]): T;
//# sourceMappingURL=containerProxy.d.ts.map