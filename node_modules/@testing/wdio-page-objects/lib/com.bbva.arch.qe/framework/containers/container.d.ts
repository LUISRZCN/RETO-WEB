/**
 * Page Objects represent a page or view in an application and they should be loaded from Step
 * Classes only via **[pageProvider](./PageProvider.md)** api.
 *
 *   ```ts
 *     import { PageObject, PageContext } from "@testing/wdio-page-objects";
 *
 *     @PageContext({
 *         wrapper: `#example`
 *     })
 *     export class ExamplePage extends PageObject {
 *     }
 *   ```
 * PageObjects are created through Classes that extend one of the superClasses listed below:
 *
 * -----------------------
 *
 * @module ContainerObjects
 */
import '@testing/wdio-shadow-service';
import { ContainerContextMetadata } from './containerContext';
/**
 * @hidden
 */
export declare type ContextTypes = "web" | "mobile-ios" | "mobile-android";
/**
 * The present Class contains the base functionality that's inherited by all the others page
 * objects-type Classes, like [PageObjects](../pages/PageObject.md) or
 * [ComponentObjects](../components/ComponentObject.md).
 *
 * When extended directly in order to create the representation of a simple container,
 * the container's metadata must be provided via **[ContainerContext](ContainerContext.md)**
 * decorator.
 *
 *  ```typescript
 *    @ContainerContext({
 *        wrapper: 'text-container'
 *    })
 *    export class TextContainer extends ContainerObject {
 *    }
 *  ```
 *
 * -----------------------
 *
 */
export declare abstract class ContainerObject {
    /**
     * Metadata provided in the decorator via [PageProvider]() or [ComponentProvider]().
     */
    readonly context: Readonly<ContainerContextMetadata>;
    /**
     * The name of the class that the Object's instance has been constructed against.
     *
     * @hidden
     */
    readonly type: Readonly<string>;
    /**
     * The DOM element provided as metadata in the [ContextProvider's *wrapper*]() property.
     *
     */
    readonly wrapper: Readonly<WebdriverIO.Element>;
    /**
     * Time to wait for the DOM element representing the container to be loaded and ready to
     * be interacted.
     *
     * Its configuration can be customized via property `browser.config.timeouts.L`.
     */
    get timeout(): number;
    /**
     * This method should return true when the view or page loaded in the browser matches with
     * the *PageObject* instance active or, in other words, when the view or page represented by the
     * *PageObject* is the current page.
     *
     * The check is performed by comparing the page object's metadata defined via
     * [PageContext](../modules/PageContext.md) with the view or page loaded in the
     * application against which the tests are being executed.
     *
     * If you override this class remember to call `super.isCurrent()` to keep this behavior.
     *
     * ```ts
     *     import { PageObject, PageContext } from "@testing/wdio-page-objects";
     *
     *     @PageContext({
     *         wrapper: `#example`
     *     })
     *     export class ExamplePage extends PageObject {
     *     }
     *  ```
     *
     * --
     */
    isDisplayed(): boolean;
}
/**
 * @hidden
 */
export interface GenericSlottedContainerObject {
    /**
     * This method will be used by Acis to get the current active container Element when
     * someone tries to look for other Containers or Component inside the one represented
     * by this class.
     *
     * By default this method returns `undefined` meaning it can't contain any components
     * accessible from the outside, so that users have to interact with contained elements
     * only though this class interface.
     *
     * If your component is meant to nest other unknown components (i.e. your component is
     * a tabs component, an slider, accordion, etc) you should override this method and return
     * the current active container in which to look for the nested components. This way users
     * will be able to introspect their components by running
     * ```
     * componentProvider.inside(YourContainerComponent).find(MyAddedComponent1, MyAddedComponent2);
     * ```
     *
     * Use of this method outside the framework or the owner class is not recommended.
     *
     * @protected
     */
    getSlot(): WebdriverIO.Element;
}
/**
 * @hidden
 */
export declare function isLoading(container: ContainerObject): boolean;
/**
 * @hidden
 */
export declare function ensureContext(container: ContainerObject | ContextTypes): void;
//# sourceMappingURL=container.d.ts.map