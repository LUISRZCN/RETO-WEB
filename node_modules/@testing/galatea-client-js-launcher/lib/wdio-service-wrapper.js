const Tunnel = require('./tunnel');
const crypto = require('crypto');

module.exports = class WdioGalateaTunnelWrapper extends Tunnel{

    onPrepare(config, capabilities) {
        if (!config.galateaTunnel) {
            return;
        }

        const {
            HTTP_PROXY,
            http_proxy,
            GLOBAL_AGENT_HTTP_PROXY
        } = process.env;

        console.log(`[galatea-tunnel-client] HTTP_PROXY: ${HTTP_PROXY} - http_proxy: ${http_proxy} - GLOBAL_AGENT_HTTP_PROXY: ${GLOBAL_AGENT_HTTP_PROXY}`);

        this.tunnel = new Tunnel();

        const { galateaTunnelOpts, user, key } = config;
        const options = {
            ...galateaTunnelOpts,
            username: user,
            password: key,
            tunnelId: galateaTunnelOpts.tunnelId || crypto.randomBytes(16).toString('hex'),
            proxy: galateaTunnelOpts.proxy || HTTP_PROXY || http_proxy || GLOBAL_AGENT_HTTP_PROXY
        };

        if (Array.isArray(capabilities)) {
            capabilities.forEach((capability) => {
                capability['galatea:tunnelId'] = capability['galatea:tunnelId'] || options.tunnelId
            });
        } else {
            Object.keys(capabilities).forEach((browser) => {
                capabilities[browser].desiredCapabilities['galatea:tunnelId'] = capabilities[browser].desiredCapabilities['galatea:tunnelId'] || options.tunnelId
            });
        }

        return this.start(options);
    }

    onComplete(_exitCode, config) {
        if (config.galateaTunnel) {
            return this.stop();
        }
    }
}