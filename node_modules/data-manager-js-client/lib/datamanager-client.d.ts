/// <reference types="node" />
import { Options } from './http/HttpClient';
/**
 * Data entry containing data provided by the data manager
 * @property {string} id
 * @property {tags: string[], [key: string]: any} data data returned by the data manager
 * @property {Date | string} lockExpiration date when the lock expires
 * @property {string} lockType either 'exclusive' or 'shared'
 */
export declare class DataEntry {
    id: string;
    data: {
        tags: string[];
        [key: string]: any;
    };
    lockExpiration?: Date | string;
    lockType?: string;
}
export declare const LockTypes: {
    [key: string]: number;
};
/**
 * Data manager client class
 * Will use the configuration object provided, but it will
 * fallback to environment variables if avail as follows:
 * - baseUrl: process.env.DATAMANAGER_BASE_URL
 * - headers: JSON.parse(process.env.DATAMANAGER_HEADERS)
 * - timeout: process.env.DATAMANAGER_TIMEOUT
 * - withCredentials: process.env.WITH_CRENDENTIALS
 * - auth.username: process.env.DATAMANAGER_AUTH_USERNAME
 * - auth.password: process.env.DATAMANAGER_AUTH_PASSWORD
 * - maxRedirects: process.env.DATAMANAGER_MAX_REDIRECTS
 * - proxy: process.env.DATAMANAGER_PROXY
 * @param {DataManagerConfig} [config]
 */
export declare class DataManager {
    config: DataManagerConfig;
    lockRefreshing: {
        [key: string]: NodeJS.Timer;
    };
    private client;
    private headers;
    constructor(config?: DataManagerConfig);
    /**
     * Locks the data entry with the indicated id.
     * @param {string} id
     * @param {boolean} exclusive if should be locked in exclusive mode
     * @returns {Promise}
     */
    lock(id: string, exclusive: boolean): Promise<any>;
    /**
     * Removes the lock in the provided data entry
     * @param {string} id the id of the data entry
     * @param {string} lockid the id of the lock
     * @returns {Promise}
     */
    unlock(id: string, lockid: string): Promise<any>;
    /**
     * Removes the lock and tags in the provided data entry
     * @param {string} id the id of the data entry
     * @param {string} lockid the id of the lock
     * @param {array} tags the list of tags to burn of the data entry
     * @returns {Promise}
     */
    unlockAndBurnData(id: string, lockid: string, tags: Array<string>): Promise<any>;
    /**
     * Find a single data entry
     * @param  {DataManagerQuery} query
     * @returns {Promise<DataEntryResult>}
     */
    findOne(query: DataManagerQuery): Promise<DataEntryResult>;
    private decrypt;
    private singleDecrypt;
    private findOneOrRetry;
    /**
     * Finds and locks multiple data entries by key
     * @param {MultipleDataManagerQuery} query
     * @returns {Promise<MultipleDataEntryResult>}
     */
    findMultiple(query: MultipleDataManagerQuery): Promise<MultipleDataEntryResult>;
    private getDynamicConfig;
}
/**
 * DataEntry result. Represents a reserved data entry in the data-manager.
 * @property {string} id
 * @property {any} data
 * @property {string} lock the id of the lock entry
 */
export declare class DataEntryResult {
    id: string;
    data: any;
    lock: string;
}
/**
 * Multiple data entry result. Map containing the results per requested
 * key
 * @extends { [key: string]: DataEntryResult }
 */
export declare class MultipleDataEntryResult {
    [key: string]: DataEntryResult;
}
/**
 * Data manager query
 * @property {string[]} tags tags that the data provided must fullfil
 * @property {boolean} lock indicates if the lock over the data should be exclusive
 */
export declare class DataManagerQuery {
    /**
     * Tags of data that we request
     * @type string[]
     */
    tags: string[];
    /**
     * Indicates if data should be exclusively locked for our use or not
     * @type boolean
     */
    lock?: boolean;
}
/**
 * Map of querys by requested key
 * @extends {[key: string]: DataManagerQuery}
 */
export declare class MultipleDataManagerQuery {
    [key: string]: DataManagerQuery;
}
export declare class NoDataError extends Error {
}
export declare class DataLockedError extends Error {
}
export declare class DataDecryptionError extends Error {
}
/**
 * Data manager config
 * @property {string} baseUrl
 * @property {Map<string,string>} headers
 * @property {number} timeout in miliseconds
 * @property {boolean} withCredentials
 * @property auth
 * @property {number} maxRedirects
 * @property {string} proxy
 **/
export declare class DataManagerConfig implements Options {
    baseUrl?: string;
    headers?: {
        [key: string]: string;
    };
    timeout?: number;
    withCredentials?: boolean;
    auth?: {
        username: string;
        password: string;
    };
    maxRedirects?: number;
    proxy?: string;
    lockAttempts?: number;
    lockAttemptsInterval?: number;
    encryptionKey?: Buffer;
}
