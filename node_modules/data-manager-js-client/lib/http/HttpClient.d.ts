export interface AuthOptions {
    username: string;
    password: string;
    sendImmediately?: boolean;
    bearer?: string | (() => string);
}
export interface Options {
    baseUrl?: string;
    auth?: AuthOptions;
    qs?: any;
    method?: string;
    headers?: {
        [key: string]: string;
    };
    body?: any;
    maxRedirects?: number;
    timeout?: number;
    proxy?: any;
    withCredentials?: boolean;
}
export interface Response<T = any> {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
}
export interface HttpClient {
    get<T = any>(url: string, config?: Options): Promise<Response<T>>;
    delete<T = any>(url: string, config?: Options): Promise<Response<T>>;
    head<T = any>(url: string, config?: Options): Promise<Response<T>>;
    post<T = any>(url: string, data?: any, config?: Options): Promise<Response<T>>;
    put<T = any>(url: string, data?: any, config?: Options): Promise<Response<T>>;
    patch<T = any>(url: string, data?: any, config?: Options): Promise<Response<T>>;
}
