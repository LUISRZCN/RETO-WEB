"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
class HttpClientImpl {
    constructor(config) {
        this._client = request.defaults(Object.assign({
            pool: { maxSockets: 10 },
            json: true,
            qsStringifyOptions: { arrayFormat: 'brackets' }
        }, config));
    }
    get(url, config) {
        return this.invoke('GET', url, config);
    }
    delete(url, config) {
        return this.invoke('DELETE', url, config);
    }
    head(url, config) {
        return this.invoke('HEAD', url, config);
    }
    post(url, data, config) {
        return this.invoke('POST', url, Object.assign({ body: data }, config));
    }
    put(url, data, config) {
        return this.invoke('PUT', url, Object.assign({ body: data }, config));
    }
    patch(url, data, config) {
        return this.invoke('PATCH', url, Object.assign({ body: data }, config));
    }
    invoke(method, url, config) {
        let options = Object.assign({ method: method, uri: url }, config);
        return new Promise((res, rej) => {
            this._client(options, (error, response, body) => {
                error = error || this.checkResponseStatus(response, body, config);
                if (error) {
                    rej(error);
                }
                else {
                    res(this.buildResponse(response, body));
                }
            });
        });
    }
    checkResponseStatus(response, body, options) {
        if (response.statusCode < 200 || response.statusCode > 299) {
            let error = {
                statusCode: response.statusCode,
                message: response.statusCode + ' - ' + JSON.stringify(body),
                options: options,
                response: this.buildResponse(response, body)
            };
            Error.captureStackTrace(error);
            return error;
        }
    }
    buildResponse(response, body) {
        return {
            data: body,
            status: response.statusCode,
            statusText: response.statusMessage,
            headers: response.headers,
            request: response.request.toJSON()
        };
    }
}
exports.default = HttpClientImpl;
